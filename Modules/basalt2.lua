local bundled = true local bundled_basaltContent = {} local bundled_basaltLoaded = {} local bundled_availableFiles = {}  local baseRequire = require require = function(name)     if(bundled_basaltContent["basalt/"..name])then         if(bundled_basaltLoaded["basalt/"..name]==nil)then             bundled_basaltLoaded["basalt/"..name] = bundled_basaltContent["basalt/"..name]()         end         return bundled_basaltLoaded["basalt/"..name]     end     if(bundled_basaltContent["basalt/elements/"..name])then         if(bundled_basaltLoaded["basalt/elements/"..name]==nil)then             bundled_basaltLoaded["basalt/elements/"..name] = bundled_basaltContent["basalt/elements/"..name]()         end         return bundled_basaltLoaded["basalt/elements/"..name]     end     if(bundled_basaltContent["basalt/extensions/"..name])then         if(bundled_basaltLoaded["basalt/extensions/"..name]==nil)then             bundled_basaltLoaded["basalt/extensions/"..name] = bundled_basaltContent["basalt/extensions/"..name]()         end         return bundled_basaltLoaded["basalt/extensions/"..name]     end     if(bundled_basaltContent["basalt/libraries/"..name])then         if(bundled_basaltLoaded["basalt/libraries/"..name]==nil)then             bundled_basaltLoaded["basalt/libraries/"..name] = bundled_basaltContent["basalt/libraries/"..name]()         end         return bundled_basaltLoaded["basalt/libraries/"..name]     end      return baseRequire(name) end  bundled_basaltContent["Modules/basaltLoader"] = function(...) local db=table.pack(...) local _c=fs.getDir(db[2]or".basalt")if(_c==nil)then error("Unable to find directory "..db[2].." please report this bug to our discord.")end;local ac={}local bc={}local cc={} local dc={}local _d={}local ad;local bd if not(bundled)then if(fs.exists(fs.combine(_c,"elements")))then for c_a,d_a in pairs(fs.list(fs.combine(_c,"elements")))do if (fs.isDir(fs.combine(fs.combine(_c,"elements"),d_a)))then cc[d_a]=true else local _aa=d_a:gsub(".lua","")cc[_aa]=true end end end;local b_a={} if(fs.exists(fs.combine(_c,"extensions")))then for c_a,d_a in pairs(fs.list(fs.combine(_c,"extensions")))do table.insert(b_a,d_a)end end for c_a,d_a in pairs(b_a)do local _aa if (fs.isDir(fs.combine(fs.combine(_c,"extensions"),d_a)))then table.insert(_d,fs.combine(fs.combine(_c,"extensions"),d_a))_aa=require(d_a.."/init")else table.insert(_d,d_a) _aa=require(d_a:gsub(".lua",""))end if(type(_aa)=="table")then for aaa,baa in pairs(_aa)do if(type(aaa)=="string")then if(dc[aaa]==nil)then dc[aaa]={}end;table.insert(dc[aaa],baa)end end end end else for b_a,c_a in pairs(bundled_availableFiles["basalt/elements"])do cc[c_a:gsub(".lua","")]=true end for b_a,c_a in pairs(bundled_availableFiles["basalt/extensions"])do table.insert(_d,c_a) local d_a=require(c_a:gsub(".lua","")) if(type(d_a)=="table")then for _aa,aaa in pairs(d_a)do if(type(_aa)=="string")then if(dc[_aa]==nil)then dc[_aa]={}end;table.insert(dc[_aa],aaa)end end end end end function ac.load(b_a)if bc[b_a]then return bc[b_a]end;local c_a=package.path local d_a="path;/path/?.lua;/path/?/init.lua;"local _aa=d_a:gsub("path",_c) local aaa=d_a:gsub("path",_c.."/elements")local baa=d_a:gsub("path",_c.."/extensions")local caa=d_a:gsub("path",_c.. "/libraries")package.path=_aa.. aaa..baa..caa..c_a bc[b_a]=require(fs.combine("elements",b_a)) if dc[b_a]then for daa,_ba in ipairs(dc[b_a])do if(_ba.extensionProperties~=nil)then _ba.extensionProperties(bc[b_a])end;_ba.extensionProperties=nil;if (_ba.init~=nil)then _ba.init(bc[b_a],ad)end;_ba.init=nil for aba,bba in pairs(_ba)do if(type(aba)=="string")then bc[b_a][aba]=bba end end end end;package.path=c_a;return bc[b_a]end;function ac.getElementList()return cc end function ac.extensionExists(b_a)for c_a,d_a in pairs(_d)do if( string.lower(d_a:gsub(".lua",""))==string.lower(b_a))then return true end end;return false end;function ac.getExtension(b_a)if(dc[b_a]~=nil)then return dc[b_a]end;return b_a==nil and dc or nil end;function ac.setBasalt(b_a) ad=b_a end function ac.getConfig() if(bd==nil)then local b_a="https://raw.githubusercontent.com/Pyroxenium/basalt-docs/main/config.json" if(b_a~=nil)then local c_a=http.get(b_a)if(c_a==nil)then error("Couldn't get the config file from github!")end;if(bd~=nil)then pcall(function()c_a.close()end)return bd end bd=textutils.unserializeJSON(c_a.readAll())c_a.close()return bd else error("Couldn't find the github path in the settings basalt.github!")end end;return bd end local function cd(b_a)local c_a=ac.getConfig() for d_a,_aa in pairs(c_a.versions.elements)do if( string.lower(d_a)==string.lower(b_a))then local aaa=_aa[2] local baa=http.get(aaa)if(baa==nil)then error("Couldn't get the element "..b_a.." from github!")end;local caa=baa.readAll()return caa end end end local function dd(b_a)b_a=b_a:gsub("^%l",string.upper) if(cc[b_a]==nil)then print("Loading element ".. b_a.." from github...")local c_a=cd(b_a)if(c_a==nil)then error("Couldn't find the element "..b_a.." in the github config!")end if (settings.get("basalt.storeDownloadedFiles"))then local _aa=fs.open(fs.combine(_c,"elements/"..b_a..".lua"),"w")_aa.write(c_a)_aa.close()end;local d_a=load(c_a,nil,"t",_ENV)()bc[b_a]=d_a if (dc[b_a]~=nil)then for _aa,aaa in ipairs(dc[b_a])do if(aaa.extensionProperties~=nil)then aaa.extensionProperties(bc[b_a])end;aaa.extensionProperties=nil;if (aaa.init~=nil)then aaa.init(bc[b_a],ad)end;aaa.init=nil for baa,caa in pairs(aaa)do if(type(baa)=="string")then bc[b_a][baa]=caa end end end end;cc[b_a]=true;return d_a end end local function __a(b_a)local c_a=ac.getConfig() for d_a,_aa in pairs(c_a.versions.extensions)do if( string.lower(d_a)==string.lower(b_a))then local aaa=_aa[2] local baa=http.get(aaa)if(baa==nil)then error("Couldn't get the extension "..b_a.." from github!")end;local caa=baa.readAll()return caa end end end local function a_a(b_a) if not(ac.extensionExists(b_a))then print("Loading extension "..b_a.." from github...")local c_a=__a(b_a)if(c_a==nil)then error("Couldn't find the extension "..b_a.." in the github config!")end if (settings.get("basalt.storeDownloadedFiles"))then local aaa=fs.open(fs.combine(_c,"extensions/"..b_a..".lua"),"w")aaa.write(c_a)aaa.close()end;local d_a=load(c_a,nil,"t",_ENV)local _aa=d_a() if(type(_aa)=="table")then for aaa,baa in pairs(_aa)do if(dc[aaa]==nil)then dc[aaa]={}end table.insert(dc[aaa],baa) if(aaa=="Basalt")then baa.basalt=ad;for caa,daa in pairs(baa)do if(type(caa)=="string")then if(caa=="init")then daa(ad)else ad[caa]=daa end end end else if(bc[aaa]~=nil)then if( baa.extensionProperties~=nil)then baa.extensionProperties(bc[aaa])end;baa.extensionProperties=nil if(baa.init~=nil)then baa.init(bc[aaa],ad)end;baa.init=nil;for caa,daa in pairs(baa)do if(type(caa)=="string")then bc[aaa][caa]=daa end end end end end end;table.insert(_d,b_a)end end;function ac.require(b_a,c_a) if(b_a=="element")then return dd(c_a)elseif(b_a=="extension")then return a_a(c_a)end end;return ac end bundled_basaltContent["Modules/elements/BaseFrame"] = function(...) local d=require("basaltLoader")local _a=d.load("Container") local aa=setmetatable({},_a)aa.__index=aa;aa:initialize("BaseFrame") function aa:new(ba,ca,da) local _b=_a:new(ba,ca,da)setmetatable(_b,self)self.__index=self _b:setType("BaseFrame")_b:create("BaseFrame") _b:setTerm(term.current())_b:setSize(term.getSize())return _b end function aa:getSize()local ba=self:getProperty("term")if(ba~=nil)then return ba.getSize()end;return 1,1 end function aa:getWidth()return select(1,self:getSize())end function aa:getHeight()return select(2,self:getSize())end;function aa:getPosition()return 1,1 end function aa:forceRender()self.updateRendering=true self:forceVisibleChildrenUpdate()self.renderSystem.forceRender()end function aa:event(ba,...)_a.event(self,ba,...)if(ba=="term_resize")then self:forceVisibleChildrenUpdate()self:setSize(term.getSize()) self:setTerm(term.current())end end;function aa:mouse_click(...)_a.mouse_click(self,...) self.basalt.setFocusedFrame(self)end;function aa:lose_focus() _a.lose_focus(self)self:setCursor(false)end;return aa end bundled_basaltContent["Modules/elements/BasicElement"] = function(...) local _b=require("utils").split local ab=require("utils").deepcopy;local bb=require("utils").uuid local cb=require("expect").expect local db={__tostring=function(dc)return dc.type[1]end,__type=function(dc)return dc.type[1]end}db.__index=db;local _c={}local ac={}local bc={}local cc="BasicElement" function db:new(dc,_d,ad) cb(1,self,"table")cb(2,dc,"string","nil")cb(3,_d,"Container","nil") cb(4,ad,"table","nil")local bd={}setmetatable(bd,self)self.__index=self;bd.__noCopy=true bd:create("BasicElement")bd.parent=_d;bd.basalt=ad;bd.Name=dc or bb()return bd end function db:addPropertyObserver(dc,_d)cb(1,self,"table")cb(2,dc,"string") cb(3,_d,"function")if not self.propertyObservers[dc]then self.propertyObservers[dc]={}end table.insert(self.propertyObservers[dc],_d)return self end function db:removePropertyObserver(dc,_d)cb(1,self,"table")cb(2,dc,"string") cb(3,_d,"number","function") if not self.propertyObservers[dc]then return self end if(type(_d)=="number")then table.remove(self.propertyObservers[dc],_d)else for ad,bd in pairs(self.propertyObservers[dc])do if(bd==_d)then table.remove(self.propertyObservers[dc],ad)end end end;return self end function db:forcePropertyObserverUpdate(dc)cb(1,self,"table")cb(2,dc,"string")if not self.propertyObservers[dc]then return self end for _d,ad in pairs(self.propertyObservers[dc])do if(type(ad)=="function")then ad(self,dc)end end;return self end function db:setProperty(dc,_d,ad)cb(1,self,"table")cb(2,dc,"string") cb(4,ad,"function","nil")if(ad~=nil)then _d=ad(self,dc,_d)end;if type(_d)=='table'then _d=ab(_d)end;if(self[dc]~=_d)then self[dc]=_d end if( self.propertyObservers[dc]~=nil)then for bd,cd in pairs(self.propertyObservers[dc])do cd(self,dc,_d)end end;return self end function db:getProperty(dc)cb(1,self,"table")cb(2,dc,"string")local _d=self[dc]if( type(_d)=="function")then return _d()end;return _d end;function db:hasProperty(dc)cb(1,self,"table")cb(2,dc,"string") return self[dc]~=nil end function db:setProperties(dc) cb(1,self,"table")cb(2,dc,"table")for _d,ad in pairs(dc)do self[_d]=ad end;return self end function db:getProperties()cb(1,self,"table")local dc={} for _d,ad in pairs(self)do if(type(ad)=="function")then dc[_d]=ad()else dc[_d]=ad end end;return dc end function db:getPropertyType(dc)cb(1,self,"table")cb(2,dc,"string") for _d,ad in pairs(self.type)do if(ac[ad]~=nil)then if(ac[ad][dc]~=nil)then return ac[ad][dc]end end end end function db:updateRender() if(self.parent~=nil)then self.parent:forceVisibleChildrenUpdate()self.parent:updateRender()else self.updateRendering=true end end function db:addProperty(dc,_d,ad,bd,cd,dd,__a)if(_d==nil)then _d="any"end;if(bd==nil)then bd=false end local a_a=dc:gsub("^%l",string.upper)if not _c[cc]then _c[cc]={}ac[cc]={}end;if(type(ad)=="table")then ad=ab(ad)end;_c[cc][dc]=ad;ac[cc][dc]=_d if not(bd)then self["set"..a_a]=function(b_a,c_a,...) cb(1,b_a,"table") if(cd~=nil)then local d_a=cd(b_a,c_a,...)if(d_a~=nil)then c_a=d_a end end;if __a~=true then b_a:updateRender()end;if(_d~=nil)then cb(2,c_a,"function","dynValue",unpack(_b(_d,"|")))end;b_a:setProperty(dc,c_a) return b_a end end self["get"..a_a]=function(b_a,...)local c_a=b_a:getProperty(dc)if(dd~=nil)then return dd(b_a,c_a,...)end;return c_a end end function db:combineProperty(dc,...)dc=dc:gsub("^%l",string.upper)local _d={...} self["get"..dc]=function(ad) cb(1,ad,"table")local bd={}for cd,dd in pairs(_d)do bd[#bd+1]=ad["get"..dd:gsub("^%l",string.upper)](ad)end;return unpack(bd)end self["set"..dc]=function(ad,...)cb(1,ad,"table")local bd={...} for cd,dd in pairs(_d)do local __a=ad:getPropertyType(dd)if(__a~=nil)then cb(cd+1,bd[cd],ad:getPropertyType(dd),"function","dynValue")end ad["set"..dd:gsub("^%l",string.upper)](ad,bd[cd])end;return ad end;return self end;function db:initialize(dc)cc=dc;return self end;function db:create(dc) if(_c[dc]~=nil)then for _d,ad in pairs(_c[dc])do if(type(ad)=="table")then self[_d]=ab(ad)else self[_d]=ad end end end end function db:addListener(dc,_d) self[ "on"..dc:gsub("^%l",string.upper)]=function(ad,...) cb(1,ad,"table") for bd,cd in pairs({...})do cb(bd+1,cd,"function")if(ad.listeners==nil)then ad.listeners={}end;if(ad.listeners[dc]==nil)then ad.listeners[dc]={}end table.insert(ad.listeners[dc],cd)end;ad:listenEvent(_d)return ad end;return self end function db:fireEvent(dc,...)cb(1,self,"table")cb(2,dc,"string") if (self.listeners~=nil)then if(self.listeners[dc]~=nil)then for _d,ad in pairs(self.listeners[dc])do ad(self,...)end end end;return self end function db:isType(dc)if(self.type~=nil)then for _d,ad in pairs(self.type)do if(ad==dc)then return true end end end;return false end function db:listenEvent(dc,_d)cb(1,self,"table")cb(2,dc,"string") cb(3,_d,"boolean","nil") if(self.parent~=nil)then if(_d)or(_d==nil)then self.parent:addEvent(dc,self)self.events[dc]=true elseif(_d==false)then self.parent:removeEvent(dc,self)self.events[dc]=false end end;return self end function db:updateEvents()cb(1,self,"table") if(self.parent~=nil)then for dc,_d in pairs(self.events)do if(_d)then self.parent:addEvent(dc,self)else self.parent:removeEvent(dc,self)end end end;return self end function db:extend(dc,_d)if(bc[cc]==nil)then bc[cc]={}end;if(bc[cc][dc]==nil)then bc[cc][dc]={}end;table.insert(bc[cc][dc],_d)return self end function db:callExtension(dc)for _d,ad in pairs(self.type)do if(bc[ad]~=nil)then if(bc[ad][dc]~=nil)then for bd,cd in pairs(bc[ad][dc])do cd(self)end end end end;return self end;db:addProperty("Name","string","BasicElement") db:addProperty("type","string|table",{"BasicElement"},false,function(dc,_d) if( type(_d)=="string")then table.insert(dc.type,1,_d)return dc.type end end,function(dc,_d,ad)return dc.type[ad or 1]end) db:addProperty("z","number",1,false,function(dc,_d)dc.z=_d;if(dc.parent~=nil)then dc.parent:updateChild(dc)end;return _d end)db:addProperty("enabled","boolean",true) db:addProperty("parent","table",nil)db:addProperty("events","table",{}) db:addProperty("propertyObservers","table",{})function db:init() if not self.initialized then self:callExtension("Init")end;self:setProperty("initialized",true) self:callExtension("Load")end return db end bundled_basaltContent["Modules/elements/BigMonitor"] = function(...) local ab,bb,cb,db=type,string.len,string.rep,string.sub local _c=require("utils").tHex;local ac=require("expect").expect local function bc(ad)local bd,cd,dd,__a,a_a,b_a=1,1,1,1,0,0 local c_a,d_a=false,1;local _aa,aaa=colors.white,colors.black for bba,cba in pairs(ad)do for dba,_ca in pairs(cba)do if(ab(_ca)=="string")then local aca=peripheral.wrap(_ca)if(aca==nil)then error("Unable to find monitor ".._ca)end;ad[bba][dba]=aca ad[bba][dba].name=_ca end end end local function baa()local bba=0;local cba=0 for dba,_ca in pairs(ad)do local aca=0;local bca=0;for cca,dca in pairs(_ca)do local _da,ada=dca.getSize() aca=aca+_da;bca=ada end bba=math.max(bba,aca)cba=cba+bca end;return bba,cba end local function caa(bba,...)local cba={...}return function()for dba,_ca in pairs(ad)do for aca,bca in pairs(_ca)do bca[bba](table.unpack(cba))end end end end local function daa()caa("setCursorBlink",false)() if not(c_a)then return end;if(ad[__a]==nil)then return end;local bba=ad[__a][dd] if(bba==nil)then return end;bba.setCursorBlink(c_a)end local function _ba(bba)local cba=0;for dba,_ca in pairs(ad[bba])do local aca,bca=_ca.getSize() cba=math.max(cba,bca)end;return cba end local function aba(bba,cba,dba,_ca,aca)local bca=dba;local cca=_ca;local dca=aca;local _da=1;local ada=_ba(_da) while cba>ada and _da<=#ad do cba=cba-ada;_da=_da+1;if _da<=#ad then ada=_ba(_da)end end;if _da>#ad then return end;local bda=ad[_da]local cda=1 while bb(bca)>0 and cda<=#bda do local dda=bda[cda]local __b,a_b=dda.getSize()local b_b=bba local c_b=math.min(__b-b_b+1,bb(bca))dda.setCursorPos(b_b,cba) dda.blit(db(bca,1,c_b),db(cca,1,c_b),db(dca,1,c_b))bca=db(bca,c_b+1)cca=db(cca,c_b+1)dca=db(dca,c_b+1)bba=1;cda= cda+1 end end return {clear=caa("clear"),setCursorBlink=function(bba)c_a=bba;daa()end,getCursorBlink=function()return c_a end,getCursorPos=function()return bd,cd end,setCursorPos=function(bba,cba) bd,cd=bba,cba;daa()end,setTextScale=function(bba)caa("setTextScale",bba)() d_a=bba end,getTextScale=function()return d_a end,blit=function(bba,cba,dba)aba(bd,cd,bba,cba,dba)end,write=function(bba) bba=tostring(bba)local cba=bb(bba) aba(bd,cd,bba,cb(_c[_aa],cba),cb(_c[aaa],cba))end,getSize=baa,setBackgroundColor=function(bba) caa("setBackgroundColor",bba)()aaa=bba end,setTextColor=function(bba) caa("setTextColor",bba)()_aa=bba end,calculateClick=function(bba,cba,dba)local _ca=0 for aca,bca in pairs(ad)do local cca=0;local dca=0 for _da,ada in pairs(bca)do local bda,cda=ada.getSize()if(ada.name==bba)then return cba+cca,dba+_ca end cca=cca+bda;if(cda>dca)then dca=cda end end;_ca=_ca+dca end;return cba,dba end}end;local cc=require("basaltLoader")local dc=cc.load("Container") local _d=setmetatable({},dc)_d.__index=_d;_d:initialize("BigMonitor") function _d:new(ad,bd,cd) local dd=dc:new(ad,bd,cd)setmetatable(dd,self)self.__index=self dd:setType("BigMonitor")dd:create("BigMonitor")return dd end function _d:event(ad,...)dc.event(self,ad,...)if(ad=="monitor_resize")then self:forceVisibleChildrenUpdate() self:setSize(self.massiveMon.getSize())end end function _d:setGroup(ad)ac(1,self,"table")ac(2,ad,"table") if(ab(ad)~="table")then error( "Expected table, got "..ab(ad))end;local bd={} for cd,dd in pairs(ad)do bd[cd]={} for __a,a_a in pairs(dd)do if(ab(a_a=="string"))then local b_a=peripheral.wrap(a_a)if(b_a==nil)then error("Unable to find monitor "..a_a)end;bd[cd][__a]=b_a bd[cd][__a].name=a_a elseif(ab(a_a)=="table")then bd[cd][__a]=a_a bd[cd][__a].name=peripheral.getName(a_a)end end end;self.monitors=bd;self.massiveMon=bc(bd) self:setTerm(self.massiveMon) self:setSize(self.massiveMon.getSize())return self end function _d:getGroup()ac(1,self,"table")return self.monitors end function _d:lose_focus()dc.lose_focus(self)self:setCursor(false)end;function _d:monitor_touch(ad,bd,cd) self:mouse_click(1,self.massiveMon.calculateClick(ad,bd,cd))end;return _d end bundled_basaltContent["Modules/elements/Button"] = function(...) local _a=require("basaltLoader") local aa=_a.load("VisualElement")local ba=require("utils").getCenteredPosition local ca=setmetatable({},aa)ca.__index=ca;ca:initialize("Button") ca:addProperty("text","string","Button") function ca:new(da,_b,ab)local bb=aa:new(da,_b,ab)setmetatable(bb,self) self.__index=self;bb:setType("Button")bb:create("Button") bb:setSize(10,3)bb:setZ(5)return bb end function ca:render()aa.render(self)local da=self:getText() local _b,ab=ba(da,self:getWidth(),self:getHeight())self:addText(_b,ab,da)end;return ca end bundled_basaltContent["Modules/elements/Checkbox"] = function(...) local _a=require("basaltLoader") local aa=_a.load("VisualElement")local ba=require("utils").getCenteredPosition local ca=setmetatable({},aa)ca.__index=ca;ca:initialize("Checkbox") ca:addProperty("checked","boolean",false,nil,function(da) da:updateRender()end)ca:addProperty("checkedSymbol","string","\42") ca:addProperty("checkedColor","color",colors.white) ca:addProperty("checkedBgColor","color",colors.black) ca:combineProperty("Symbol","checkedSymbol","checkedColor","checkedBgColor")ca:addListener("check","checked_value") function ca:new(da,_b,ab) local bb=aa:new(da,_b,ab)setmetatable(bb,self)self.__index=self bb:setType("Checkbox")bb:create("Checkbox")bb:setSize(1,1)return bb end function ca:render()aa.render(self) local da,_b=ba(self.checkedSymbol,self:getWidth(),self:getHeight())if self.checked then self:addText(da,_b,self.checkedSymbol)else self:addText(da,_b," ")end end ca:extend("Load",function(da)da:listenEvent("mouse_click")end) function ca:mouse_click(da,_b,ab) if(aa.mouse_click(self,da,_b,ab))then if(da==1)then self:setChecked(not self:getChecked())self:fireEvent("check",self:getChecked()) self:updateRender()end;return true end end;return ca end bundled_basaltContent["Modules/elements/Container"] = function(...) local ab=require("basaltLoader") local bb=ab.load("VisualElement")local cb=require("utils").uuid local db=require("utils").subText;local _c=require("expect").expect local ac=setmetatable({},bb)ac.__index=ac;local bc=require("renderSystem") ac:initialize("Container") ac:addProperty("term","table",nil,false,function(ad,bd)if(bd~=nil)then bd.__noCopy=true end ad.renderSystem=bc(bd)end,function(ad)if(ad:getParent()~=nil)then return ad:getParent():getTerm()end;return ad.term end)ac:addProperty("children","table",{}) ac:addProperty("childrenEvents","table",{})ac:addProperty("visibleChildrenEvents","table",{}) ac:addProperty("isVisibleChildrenEventsUpdated","table",{})ac:addProperty("cursorBlink","boolean",false) ac:addProperty("cursorColor","color",colors.white)ac:addProperty("cursorX","number",1) ac:addProperty("cursorY","number",1) ac:addProperty("focusedChild","table",nil,false,function(ad,bd)local cd=ad:getFocusedChild()if(cd~=bd)then if(cd~=nil)then cd:setFocused(false,true)end if(bd~=nil)then bd:setFocused(true,true)end end;return bd end) ac:addProperty("xOffset","number",0,nil,function(ad,bd)ad:forceVisibleChildrenUpdate()end) ac:addProperty("yOffset","number",0,nil,function(ad,bd)ad:forceVisibleChildrenUpdate()end)ac:combineProperty("Offset","xOffset","yOffset") local cc,dc=string.sub,math.max local function _d(ad,bd) if(bd:sub(1,3)=="add")and(ac[bd]==nil)then local cd=bd:sub(4) if (ab.getElementList()[cd])then return function(dd,__a,a_a,b_a,c_a,d_a,_aa,aaa)local baa=__a if(type(__a)=="table")then baa=__a.name;__a.name=nil end local caa=dd.basalt.create(baa or cb(),dd,cd,type(__a)=="table"and __a or nil)dd:addChild(caa,caa:getZ()) if(a_a~=nil)then caa:setX(a_a)end;if(b_a~=nil)then caa:setY(b_a)end;if(c_a~=nil)then caa:setWidth(c_a)end;if(d_a~=nil)then caa:setHeight(d_a)end;if(_aa~= nil)then caa:setBackground(_aa)end;if(aaa~=nil)then caa:setForeground(aaa)end;return caa end end end;return ac[bd]end function ac:new(ad,bd,cd)local dd=bb:new(ad,bd,cd)setmetatable(dd,self) self.__index=_d;dd:create("Container")dd:setType("Container")return dd end function ac:postRender()if(self:getTerm()==nil)then end local ad=self:getVisibleChildren() if self.parent==nil then if self.updateRendering then bb.postRender(self)for bd,cd in pairs(ad)do cd:processRender()end end else bb.postRender(self)for bd,cd in pairs(ad)do cd:processRender()end end end function ac:processRender()bb.processRender(self) if(self.updateRendering)then if (self.renderSystem~=nil)then self.renderSystem.update() self.updateRendering=false end end end function ac:getVisibleChildren()_c(1,self,"table")if(self.isVisibleChildrenUpdated)then return self.visibleChildren end;local ad={} for bd,cd in ipairs(self.children)do if self:isChildVisible(cd)then table.insert(ad,cd)end end;self.visibleChildren=ad;self.isVisibleChildrenUpdated=true;return ad end function ac:isChildVisible(ad)_c(1,self,"table")_c(2,ad,"table") local bd,cd=ad:getPosition()local dd,__a=ad:getSize()local a_a,b_a=self:getSize() local c_a,d_a=self:getOffset()bd=bd-c_a;cd=cd-d_a;return  ad:getVisible()and bd<=a_a and cd<=b_a and bd+dd>0 and cd+__a>0 end function ac:forceVisibleChildrenUpdate()_c(1,self,"table") self.isVisibleChildrenUpdated=false;for ad,bd in pairs(self.isVisibleChildrenEventsUpdated)do self.isVisibleChildrenEventsUpdated[ad]=false end end function ac:getChild(ad)_c(1,self,"table")_c(2,ad,"string","table") for bd,cd in ipairs(self.children)do if cd:getName()==ad then return cd end end end function ac:addChild(ad,bd)_c(1,self,"table")_c(2,ad,"table") _c(3,bd,"number","nil")if(self:getChild(ad)~=nil)then return end;local cd=false;bd=bd or ad:getZ() for dd,__a in ipairs(self.children)do if bd<__a:getZ()then table.insert(self.children,dd,ad)cd=true;break end end if not cd then table.insert(self.children,ad)end;ad:setParent(self)ad.basalt=self.basalt;ad:init() self.isVisibleChildrenUpdated=false;return ad end function ac:removeChild(ad)_c(1,self,"table")_c(2,ad,"string","table")if(type(ad)== "table")then ad=ad:getName()end;for bd,cd in ipairs(self.children)do if cd:getName()==ad then table.remove(self.children,bd)break end end self.isVisibleChildrenUpdated=false end function ac:isEventRegistered(ad,bd)_c(1,self,"table")_c(2,ad,"string") _c(3,bd,"table") if(self.childrenEvents[ad]==nil)then return false end for cd,dd in ipairs(self.childrenEvents[ad])do if dd==bd then return true end end;return false end function ac:addEvent(ad,bd)_c(1,self,"table")_c(2,ad,"string") _c(3,bd,"table") self.childrenEvents[ad]=self.childrenEvents[ad]or{}if(self:isEventRegistered(ad,bd))then return end;local cd=false for dd,__a in ipairs(self.childrenEvents[ad])do if bd:getZ()>=__a:getZ()then table.insert(self.childrenEvents[ad],dd,bd)cd=true;break end end;if not cd then table.insert(self.childrenEvents[ad],bd)end;if(self.parent~=nil)then self.parent:addEvent(ad,self)end self.isVisibleChildrenEventsUpdated[ad]=false end function ac:removeEvent(ad,bd)_c(1,self,"table")_c(2,ad,"string") _c(3,bd,"table") if(self.childrenEvents[ad]==nil)then return false end for cd,dd in ipairs(self.childrenEvents[ad])do if dd==bd then table.remove(self.childrenEvents[ad],cd)self.isVisibleChildrenEventsUpdated[ad]=false if (self.parent~=nil)then if(#self.childrenEvents[ad]==0)then self.parent:removeEvent(ad,self)end end;return true end end;return false end function ac:getVisibleChildrenEvents(ad)_c(1,self,"table")_c(2,ad,"string") if (self.isVisibleChildrenEventsUpdated[ad])then return self.visibleChildrenEvents[ad]end;local bd={}if self.childrenEvents[ad]then for cd,dd in ipairs(self.childrenEvents[ad])do if self:isChildVisible(dd)then table.insert(bd,dd)end end end self.visibleChildrenEvents[ad]=bd;self.isVisibleChildrenEventsUpdated[ad]=true;return bd end function ac:updateChild(ad)_c(1,self,"table")_c(2,ad,"table")if not ad or type(ad)~="table"then return end;self:removeChild(ad) self:addChild(ad,ad:getZ()) for bd,cd in pairs(self.childrenEvents)do if self:isEventRegistered(bd,ad)then self:removeEvent(bd,ad)self:addEvent(bd,ad)end end end function ac:setCursor(ad,bd,cd,dd)_c(1,self,"table")_c(2,ad,"boolean") _c(3,bd,"number","nil")_c(4,cd,"number","nil")_c(5,dd,"color","nil") if (self.parent~=nil)then local __a,a_a=self:getPosition()local b_a,c_a=self:getOffset() self.parent:setCursor( ad or false,(bd or 0)+__a-1 -b_a,(cd or 0)+a_a-1 -c_a, dd or self:getForeground())else local __a,a_a=self:getAbsolutePosition() local b_a,c_a=self:getOffset()self.cursorBlink=ad or false;if(bd~=nil)then self.cursorX=__a+bd-1 -b_a end if(cd~=nil)then self.cursorY=a_a+cd-1 -c_a end;self.cursorColor=dd or self.cursorColor if(self.cursorBlink)then self.term.setTextColor(self.cursorColor) self.term.setCursorPos(self.cursorX,self.cursorY)self.term.setCursorBlink(true)else self.term.setCursorBlink(false)end end;return self end for ad,bd in pairs({"setBg","setFg","setText"})do ac[bd]=function(cd,dd,__a,a_a) local b_a,c_a=cd:calculatePosition()local d_a,_aa=cd:getSize() if __a>=1 and __a<=_aa then a_a,dd=db(a_a,dd,d_a) if (dd~=nil)then if cd.parent then cd.parent[bd](cd.parent,b_a+dd-1,c_a+__a-1,""..a_a)else if(cd.renderSystem~=nil)then cd.renderSystem[bd](dd,__a,""..a_a)end end end end end end for ad,bd in pairs({"drawBackgroundBox","drawForegroundBox","drawTextBox"})do ac[bd]=function(cd,dd,__a,a_a,b_a,c_a)local d_a,_aa=cd:calculatePosition()local aaa,baa=cd:getSize() b_a=( __a<1 and(b_a+__a>baa and baa or b_a+__a-1)or( b_a+__a>baa and baa-__a+1 or b_a)) a_a=(dd<1 and(a_a+dd>aaa and aaa or a_a+dd-1)or(a_a+ dd>aaa and aaa-dd+1 or a_a))local caa=dc(dd+ (d_a-1),d_a) if cd.parent then cd.parent[bd](cd.parent,caa,dc(__a+ (_aa-1),_aa),a_a,b_a,c_a)else if(cd.renderSystem~=nil)then cd.renderSystem[bd](caa,dc(__a+ (_aa-1),_aa),a_a,b_a,c_a)end end end end function ac:blit(ad,bd,cd,dd,__a)local a_a,b_a=self:calculatePosition() local c_a,d_a=self:getSize() if bd>=1 and bd<=d_a then local _aa=dc(ad+ (a_a-1),a_a) if self.parent then self.parent.blit(_aa, b_a+bd-1,cd,dd,__a)else if (self.renderSystem~=nil)then self.renderSystem.blit(_aa,b_a+bd-1,cd,dd,__a,ad,c_a)end end end end function ac:event(ad,...)if(bb.event~=nil)then bb.event(self,ad,...)end for bd,cd in ipairs(self.children)do if cd.event then cd:event(ad,...)end end end for ad,bd in pairs({mouse_click=true,mouse_up=false,mouse_drag=false,mouse_scroll=true,mouse_move=false})do ac[ad]=function(cd,dd,__a,a_a,...) if(bb[ad]~=nil)then if(bb[ad](cd,dd,__a,a_a,...))then local b_a=cd:getVisibleChildrenEvents(ad) for c_a,d_a in pairs(b_a)do if(d_a and d_a[ad]~=nil)then local _aa,aaa=cd:getRelativePosition(__a,a_a)if(d_a[ad](d_a,dd,_aa,aaa,...))then cd:setFocusedChild(d_a,true) return true end end end;if(bd)then cd:setFocusedChild(nil,true)end;return true end end end end function ac.mouse_release(ad,bd,cd,dd,...) if(bb.mouse_release~=nil)then if(bb.mouse_release(ad,bd,cd,dd,...))then local __a=ad:getVisibleChildren() for a_a,b_a in pairs(__a)do if(b_a and b_a.mouse_release~=nil)then local c_a,d_a=ad:getRelativePosition(cd,dd)b_a.mouse_release(b_a,bd,c_a,d_a,...)end end;return true end end end for ad,bd in pairs({"key","key_up","char"})do ac[bd]=function(cd,...) if(bb[bd]~=nil)then if(bb[bd](cd,...))then local dd=cd:getFocusedChild()if(dd)then if(dd[bd]~=nil)then if(dd[bd](dd,...))then return true end end end;return true end end end end;return ac end bundled_basaltContent["Modules/elements/Dropdown"] = function(...) local ba=require("basaltLoader") local ca=ba.load("BasicElement")local da=ba.load("VisualElement")local _b=ba.load("List") local ab=require("utils").tHex;local bb=setmetatable({},_b)bb.__index=bb bb:initialize("Dropdown")bb:addProperty("opened","boolean",false) bb:addProperty("dropdownHeight","number",5)bb:addProperty("dropdownWidth","number",15) bb:combineProperty("dropdownSize","dropdownWidth","dropdownHeight") function bb:new(cb,db,_c)local ac=_b:new(cb,db,_c)setmetatable(ac,self) self.__index=self;ac:setType("Dropdown")ac:create("Dropdown") ac:setSize(10,1)ac:setZ(10)return ac end function bb:render()da.render(self)local cb=self:getSelectedIndex() local db=self:getScrollIndex()if self.items[cb]then self:addText(1,1,self.items[cb]) self:addText(self:getWidth(),1,"\16")end if self.opened then self:addText(self:getWidth(),1,"\31") for i=1,self.dropdownHeight do local _c=self.items[i+db-1] if _c then self:addText(1,i+1,_c.. (" "):rep( self.dropdownWidth-_c:len())) if(i+db-1 ==cb)then self:addBg(1,i+1,ab[self.selectionBackground]:rep(self.dropdownWidth)) self:addFg(1,i+1,ab[self.selectionForeground]:rep(self.dropdownWidth))else self:addBg(1,i+1,ab[self.background]:rep(self.dropdownWidth)) self:addFg(1,i+1,ab[self.foreground]:rep(self.dropdownWidth))end end end end end function bb:mouse_click(cb,db,_c)if(da.mouse_click(self,cb,db,_c))then self.opened=not self.opened return true end if self.opened then if ( db>=self.x and db<=self.x+ self.dropdownWidth and _c>=self.y+1 and _c<=self.y+self.dropdownHeight)then self.selectedIndex=_c-self.y+self.scrollIndex-1 self:fireEvent("change",self.items[self.selectedIndex]) self.basalt.thread(function()sleep(0.1)self.opened=false self:updateRender()end)return true end end end function bb:mouse_scroll(cb,db,_c) if(da.mouse_scroll(self,cb,db,_c))then self.selectedIndex=math.max(math.min(self.selectedIndex+cb, #self.items),1)self:updateRender()end if self:getOpened()then if( db>=self.x and db<=self.x+self.dropdownWidth and _c>=self.y+1 and _c<= self.y+self.dropdownHeight)then if cb==-1 then self.scrollIndex=math.max( self.scrollIndex-1,1)else self.scrollIndex=math.min( self.scrollIndex+1,#self.items-self.dropdownHeight+1)end;self:updateRender()end end end;return bb end bundled_basaltContent["Modules/elements/Frame"] = function(...)  local c=require("basaltLoader").load("Container")local d=setmetatable({},c)d.__index=d;d:initialize("Frame") function d:new(_a,aa,ba) local ca=c:new(_a,aa,ba)setmetatable(ca,self)self.__index=self ca:setType("Frame")ca:create("Frame")ca:setZ(10)ca:setSize(30,12)return ca end;return d end bundled_basaltContent["Modules/elements/Image"] = function(...) local _b=require("basaltLoader") local ab=_b.load("VisualElement")local bb=require("expect").expect local cb=require("utils").tHex;local db,_c=string.sub,string.sub;local ac=setmetatable({},ab) ac.__index=ac;ac:initialize("Image") ac:addProperty("paletteUsage","boolean",false,nil,function(dc,_d)if(_d)then dc:updatePalette()end;return _d end)ac:addProperty("frame","number",1) ac:addProperty("autoSize","boolean",true,nil,function(dc,_d) if(_d)then local ad=dc:getImage()dc:setSize(#ad[1][1][1],#ad[1])end;return _d end) ac:addProperty("image","table",{},nil,function(dc,_d)if(dc:getAutoSize())then dc:setSize(#_d[1][1][1],#_d[1])end;if(dc:getPaletteUsage())then dc:updatePalette()end end) function ac:new(dc,_d,ad)local bd=ab:new(dc,_d,ad)setmetatable(bd,self) self.__index=self;bd:setType("Image")bd:create("Image") bd:setSize(20,8)bd:setZ(5)return bd end function ac:render()ab.render(self)local dc=self:getImage() local _d=self:getFrame()local ad,bd=self:getSize() if(dc~=nil)then if dc[_d]~=nil then for y=1,#dc[_d]do local cd=dc[_d][y] self:addBlit(1,y,db(cd[1],1,ad),db(cd[2],1,ad),db(cd[3],1,ad))if(y>=bd)then break end end end end end function ac:loadImage(dc)bb(1,dc,"string")local _d=fs.open(dc,"r") if(_d==nil)then error("Image "..dc.. " not found!")end;local ad=textutils.unserialize(_d.readAll()) _d.close()if(ad==nil)then error("Image "..dc.." is not a valid image!")end;self:setImage(ad)return self end function ac:play()local dc=self:getImage()local _d=self:getFrame()if (self:getPaletteUsage())then self:updatePalette()end if (dc.animation)or(dc.animated)then local ad=dc[_d].duration or dc.secondsPerFrame or 0.05;self.animTimer=os.startTimer(ad)end;return self end;function ac:stop() if(self.animTimer)then os.cancelTimer(self.animTimer)end;return self end function ac:event(dc,_d,...) ab.event(self,dc,_d,...) if(dc=="timer")then if(_d==self.animTimer)then local ad=self:getImage() local bd=self:getFrame() if(ad[bd+1]==nil)then self:setFrame(1)else self:setFrame(bd+1)end;self:play()end end end function ac:updatePalette()local dc={}local _d=self:getImage()local ad=self:getFrame() if( _d[ad]~=nil)then if(_d.palette)then for bd,cd in pairs(_d.palette)do local dd= type(bd)=="string"and colors[bd]or bd^2;dc[dd]=cd end end if(_d[ad].palette)then for bd,cd in pairs(_d[ad].palette)do local dd=type(bd)=="string"and colors[bd]or bd^2;dc[dd]=cd end end end;for bd,cd in pairs(dc)do self:getParent():getTerm().setPaletteColor(bd,table.unpack(cd))end;return self end function ac:getMetadata(dc) if(dc~=nil)then if(self:getImage()[dc]~=nil)then return self:getImage()[dc]end;return end;local _d={}for ad,bd in pairs(self:getImage())do if(type(ad)=="string")then _d[ad]=bd end end;return _d end local function bc(dc,_d,ad,bd) local cd,dd=cb[dc:getBackground()],cb[dc:getForeground()] local __a,a_a=math.max(#_d[1][1][1],ad),math.max(#_d,bd) for b_a,c_a in ipairs(_d)do for i=1,a_a do if(c_a[i]==nil)then c_a[i]={_c(" ",__a),_c(dd,__a),_c(cd,__a)}end;if(#c_a[i][1]<__a)then c_a[i][1]= c_a[i][1]..string.rep(" ",__a-#c_a[i][1])end;if(#c_a[i][2]<__a)then c_a[i][2]= c_a[i][2]..string.rep(dd,__a-#c_a[i][2])end;if(#c_a[i][3]<__a)then c_a[i][3]= c_a[i][3]..string.rep(cd,__a-#c_a[i][3])end end end end local function cc(dc,_d,ad,bd,cd,dd,__a) if(#_d[1][1][1]<bd+#dd-1)or(#_d<cd)then bc(dc,_d, bd+#dd-1,cd)if(dc:getAutoSize())then dc:setSize(#_d[1][1][1],# _d[1])end end _d[ad][cd][__a]=db(_d[ad][cd][__a],1,bd-1)..dd..db(_d[ad][cd][__a], bd+#dd)dc:updateRender()end function ac:drawText(dc,_d,ad,bd)bb(1,dc,"number")bb(2,_d,"number") bb(3,ad,"string")bb(4,bd,"string","nil")local cd=self:getImage() local dd=self:getFrame()cc(self,cd,bd or dd,dc,_d,ad,1)return self end function ac:drawForeground(dc,_d,ad,bd)bb(1,dc,"number")bb(2,_d,"number") bb(3,ad,"string")bb(4,bd,"string","nil")local cd=self:getImage() local dd=self:getFrame()cc(self,cd,bd or dd,dc,_d,ad,2)return self end function ac:drawBackground(dc,_d,ad,bd)bb(1,dc,"number")bb(2,_d,"number") bb(3,ad,"string")bb(4,bd,"string","nil")local cd=self:getImage() local dd=self:getFrame()cc(self,cd,bd or dd,dc,_d,ad,3)return self end;return ac end bundled_basaltContent["Modules/elements/Input"] = function(...) local _a=require("basaltLoader") local aa=_a.load("VisualElement")local ba=require("utils").tHex;local ca=setmetatable({},aa) ca.__index=ca;ca:initialize("Input") ca:addProperty("value","string","")ca:addProperty("cursorIndex","number",1) ca:addProperty("scrollIndex","number",1)ca:addProperty("inputLimit","number",nil) ca:addProperty("inputType","string","text")ca:addProperty("placeholderText","string","") ca:addProperty("placeholderColor","color",colors.gray) ca:addProperty("placeholderBackground","color",colors.black) ca:combineProperty("placeholder","placeholderText","placeholderColor","placeholderBackground")ca:addListener("change","change_value") ca:addListener("enter","enter_pressed") function ca:new(da,_b,ab)local bb=aa:new(da,_b,ab)setmetatable(bb,self) self.__index=self;bb:setType("Input")bb:create("Input") bb:setSize(10,1)bb:setZ(5)return bb end function ca.render(da)aa.render(da)local _b=da:getValue()local ab=da:getWidth() local bb=false if(_b=="")then _b=da:getPlaceholderText()bb=true end local cb=_b:sub(da.scrollIndex,da.scrollIndex+ab-1) if(da.inputType=="password")then cb=("*"):rep(cb:len())end;local db=(" "):rep(ab-cb:len())cb=cb..db da:addText(1,1,cb)if(bb)then da:addBg(1,1,ba[da:getPlaceholderBackground()]:rep(ab)) da:addFg(1,1,ba[da:getPlaceholderColor()]:rep(cb:len()))end end ca:extend("Load",function(da)da:listenEvent("mouse_click") da:listenEvent("mouse_up")end)function ca:lose_focus()aa.lose_focus(self) self.parent:setCursor(false)end function ca:mouse_up(da,_b,ab) if(aa.mouse_up(self,da,_b,ab))then if(da==1)then self.cursorIndex=math.min( _b-self.x+self.scrollIndex,self.value:len()+1) self.parent:setCursor(true,self.x+self.cursorIndex-self.scrollIndex,self.y,self:getForeground())end;return true end end function ca:key(da) if(aa.key(self,da))then if da==keys.backspace and self.value~=""and self.cursorIndex>1 then local _b=self.value:sub(1,self.cursorIndex-2)local ab=self.value:sub(self.cursorIndex,-1) self.value=_b..ab;self.cursorIndex=self.cursorIndex-1 self:updateRender()elseif da==keys.left then self.cursorIndex=math.max(1,self.cursorIndex-1)self:updateRender()elseif da==keys.right then self.cursorIndex=math.min( self.value:len()+1,self.cursorIndex+1)self:updateRender()elseif da==keys.enter then self:fireEvent("enter",self.value)self:setFocused(false)self:adjustScrollIndex() self:updateRender()return end;self:adjustScrollIndex() self.parent:setCursor(true, self.x+self.cursorIndex-self.scrollIndex,self.y,self:getForeground())return true end end function ca:char(da) if(aa.char(self,da))then if self.inputLimit and self.value:len()>=self.inputLimit then return true end if self.inputType=="number"and not tonumber(da)then if (da==","or da==".")and self.value:find("[.,]")then return true elseif da~=","and da~="."then return true end end;local _b=self.value:sub(1,self.cursorIndex-1)local ab=self.value:sub(self.cursorIndex, -1)self.value=_b..da..ab;self.cursorIndex= self.cursorIndex+1 self:fireEvent("change",self.value)self:adjustScrollIndex()self:updateRender() self.parent:setCursor(true, self.x+self.cursorIndex-self.scrollIndex,self.y,self:getForeground())return true end end function ca:adjustScrollIndex()local da=self:getWidth() local _b=self:getCursorIndex()local ab=self:getScrollIndex() if _b<ab then ab=_b elseif _b>ab+da-1 then ab=_b-da+1 end;self:setScrollIndex(ab)end;return ca end bundled_basaltContent["Modules/elements/Label"] = function(...) local ca=require("basaltLoader") local da=ca.load("VisualElement")local _b=require("utils")local ab=_b.wrapText local bb=setmetatable({},da)bb.__index=bb;local cb,db=string.sub,string.rep bb:initialize("Label")bb:addProperty("autoSize","boolean",true) bb:addProperty("wrapUpdate","boolean",true)bb:addProperty("wrap","boolean",false) bb:addProperty("wrappedText","table",{},nil,function(_c,ac) _c:setWrap(true)end,function(_c)local ac=_c:getWrap()local bc=_c:getAutoSize()if (_c:getWrapUpdate())then _c:setWrapUpdate(false) _c.wrappedText=ab(_c:getText(),_c:getWidth())end;if(bc)and(ac)then _c:setHeight(#_c.wrappedText)_c:updateRender()end return _c.wrappedText end) bb:addProperty("text","string","My Label",nil,function(_c,ac)local bc=_c:getWrap()local cc=_c:getAutoSize()if(bc)then _c:setWrapUpdate(true)end if(cc)and not(bc)then _c:setSize(ac:len(),1)end end) function bb:new(_c,ac,bc)local cc=da:new(_c,ac,bc)setmetatable(cc,self) self.__index=self;cc:setType("Label")cc:create("Label")return cc end bb:extend("Init",function(_c) _c:setBackground(_c.parent:getBackground()) _c:setForeground(_c.parent:getForeground()) _c:addPropertyObserver("width",function() if(_c.autoSize)and(_c.wrap)then _c:setWrapUpdate(true) local ac=_c:getWrappedText()_c:setHeight(#ac)end end)end) function bb:render()da.render(self)local _c=self:getText() local ac=self:getWrap() if(ac)then local bc=self:getWrappedText()local cc=self:getHeight() for dc,_d in ipairs(bc)do if(dc<=cc)then self:addText(1,dc,_d)end end else self:addText(1,1,_c)end end;return bb end bundled_basaltContent["Modules/elements/List"] = function(...) local ba=require("basaltLoader") local ca=ba.load("VisualElement")local da=require("utils").tHex local _b=require("expect").expect;local ab=require("log")local bb=setmetatable({},ca)bb.__index=bb bb:initialize("List")bb:addProperty("items","table",{}) bb:addProperty("itemsBackground","table",{})bb:addProperty("itemsForeground","table",{}) bb:addProperty("connectedLists","table",{})bb:addProperty("selection","boolean",true) bb:addProperty("align","string","left")bb:addProperty("multiSelection","boolean",false) bb:addProperty("autoScroll","boolean",false)bb:addProperty("spacing","number",0) bb:addProperty("selectedIndex","table",{},nil,function(cb,db,_c) local ac=cb.selectedIndex if(cb:getMultiSelection())then if(type(db)=="table")then ac=db else if(cb:getSelectionState(db))then for bc,cc in ipairs(ac)do if cc==db then table.remove(ac,bc)break end end else table.insert(ac,db)end end if(_c~=false)then for bc,cc in pairs(cb:getConnectedLists())do cc:setSelectedIndex(ac,false)end end;return ac else if(_c~=false)then for bc,cc in pairs(cb:getConnectedLists())do cc:setSelectedIndex(db,false)end end;return{db}end end,function(cb,db)if (cb:getMultiSelection())then return db else return db[1]end end) bb:addProperty("selectionBackground","color",colors.black) bb:addProperty("selectionForeground","color",colors.cyan) bb:combineProperty("selectionColor","selectionBackground","selectionForeground") bb:addProperty("scrollIndex","number",1,nil,function(cb,db,_c) if(_c~=false)then for ac,bc in pairs(cb:getConnectedLists())do bc:setScrollIndex(db,false)end end end)bb:addListener("change","changed_value") function bb:new(cb,db,_c) local ac=ca:new(cb,db,_c)setmetatable(ac,self)self.__index=self ac:setType("List")ac:create("List")ac:setSize(15,6)return ac end bb:extend("Load",function(cb)cb:listenEvent("mouse_click") cb:listenEvent("mouse_scroll")end) function bb:render()ca.render(self)local cb,db=self:getSize() local _c=self:getItems()local ac=self:getItemsBackground() local bc=self:getItemsForeground()local cc=self:getScrollIndex() local dc,_d=self:getSelectionColor()local ad=self:getSelection()local bd=self:getSpacing() local cd=self:getAlign() for i=1,db do local dd=i+cc-1;local __a=_c[dd] if __a then if(cd=="right")then self:addText(cb-#__a+1 -bd,i,__a)elseif(cd=="center")then self:addText(math.floor((cb-#__a)/2)+1,i,__a)else self:addText(1 +bd,i,__a)end;if(ac[dd])then self:addBg(1,i,da[ac[dd]]:rep(cb))end;if(bc[dd])then self:addFg(1,i,da[bc[dd]]:rep(cb))end;if(ad)then if self:getSelectionState(dd)then self:addBg(1,i,da[dc]:rep(cb))self:addFg(1,i,da[_d]:rep(cb))end end end end end function bb:connect(cb,db,_c)_b(1,self,"table")_b(2,cb,"table") _b(3,db,"boolean","nil")_b(4,_c,"boolean","nil") table.insert(self.connectedLists,cb) if(_c~=false)then for ac,bc in ipairs(self.connectedLists)do if(bc~=cb)then bc:connect(cb,true,false)cb:connect(bc,true,false)end end;cb:connect(self,true,false)end if not(db)then cb:setSelection(self:getSelection()) cb:setMultiSelection(self:getMultiSelection())cb:setAutoScroll(self:getAutoScroll()) cb:setSelectedIndex(self:getSelectedIndex(),false) cb:setScrollIndex(self:getScrollIndex(),false)end;return self end function bb:disconnect(cb,db)_b(1,self,"table")_b(2,cb,"table") _b(3,db,"boolean","nil") for _c,ac in ipairs(self.connectedLists)do if ac==cb then table.remove(self.connectedLists,_c)if(db~=false)then cb:disconnect(self,false)end return self end end;return self end function bb:getSelectionState(cb)_b(1,self,"table")_b(2,cb,"number") if (self:getMultiSelection())then local db=self:getSelectedIndex()for _c,ac in ipairs(db)do if ac==cb then return true end end else if(self:getSelectedIndex()==cb)then return true end end;return false end function bb:addItem(cb,db,_c)_b(1,self,"table")_b(2,cb,"string") _b(3,db,"number","nil")_b(4,_c,"number","nil") table.insert(self.items,cb)if(db~=nil)then table.insert(self.itemsBackground,db or self:getBackground())end if(_c~=nil)then table.insert(self.itemsForeground,_c or self:getForeground())end if(self:getAutoScroll())then if (#self:getItems()>self:getHeight())then self:setScrollIndex(#self:getItems()-self:getHeight()+1)end end;self:updateRender()return self end function bb:updateColor(cb,db,_c)_b(1,self,"table")_b(2,cb,"number") _b(3,db,"number","nil")_b(4,_c,"number","nil")self.itemsBackground[cb]=_c or self:getBackground()self.itemsForeground[cb]=db or self:getForeground()self:updateRender() return self end function bb:removeItem(cb)_b(1,self,"table")_b(2,cb,"string") for db,_c in ipairs(self.items)do if _c==cb then table.remove(self.items,db) table.remove(self.itemsBackground,db)table.remove(self.itemsForeground,db) if (self:getAutoScroll())then if(#self:getItems()>self:getHeight())then self:setScrollIndex(# self:getItems()-self:getHeight()+1)end end;self:updateRender()return self end end;return self end function bb:removeItemByIndex(cb)_b(1,self,"table")_b(2,cb,"number") table.remove(self.items,cb)self:updateRender()return self end;function bb:clear()_b(1,self,"table")self.items={}self:updateRender()return self end function bb:selectItem(cb) _b(1,self,"table")_b(2,cb,"string")for db,_c in ipairs(self:getItems())do if _c==cb then self:setSelectedIndex(db)self:fireEvent("change",_c)return self end end self:updateRender()return self end function bb:selectItemByIndex(cb)_b(1,self,"table")_b(2,cb,"number") self:setSelectedIndex(cb) self:fireEvent("change",self:getItems()[cb])return self end function bb:getSelectedItems()_b(1,self,"table") if(self:getMultiSelection())then local cb=self:getItems()local db={}for _c,ac in ipairs(self:getSelectedIndex())do table.insert(db,cb[ac])end;return db else return self:getItems()[self:getSelectedIndex()]end end function bb:mouse_click(cb,db,_c) if(ca.mouse_click(self,cb,db,_c))then if(cb==1)then local ac,bc=self:getPosition()local cc=self:getScrollIndex()local dc=self:getItems() local _d=_c-bc+cc;if _d>=1 and _d<=#dc then self:setSelectedIndex(_d) self:fireEvent("change",self:getSelectedItems())end end;return true end end function bb:mouse_scroll(cb,db,_c) if(ca.mouse_scroll(self,cb,db,_c))then local ac,bc=self:getSize() local cc=self:getScrollIndex()local dc=self:getItems()if cb==1 and cc<#dc-bc+1 then cc=cc+1 elseif cb==-1 and cc>1 then cc=cc-1 end self:setScrollIndex(cc)self:updateRender()return true end end;return bb end bundled_basaltContent["Modules/elements/Menubar"] = function(...) local aa=require("basaltLoader") local ba=aa.load("VisualElement")local ca=aa.load("List")local da=require("utils").tHex local _b=setmetatable({},ca)_b.__index=_b;_b:initialize("Menubar") _b:addProperty("spacing","number",1) function _b:new(ab,bb,cb)local db=ca:new(ab,bb,cb)setmetatable(db,self) self.__index=self;db:setType("Menubar")db:create("Menubar") db:setSize(20,1)return db end function _b:mouse_click(ab,bb,cb) if(ba.mouse_click(self,ab,bb,cb))then if(ab==1)then local db=self.x for i=self.scrollIndex,#self.items do local _c=#self.items[i]+self.spacing;if bb>=db and bb<db+_c then self.selectedIndex=i self:fireEvent("change",self.items[i])break end;db=db+_c end end;return true end end function _b:render()ba.render(self)local ab=self.scrollIndex;local bb=1 self:addText(1,1,(" "):rep(self.width)) self:addBg(1,1,da[self.background]:rep(self.width)) self:addFg(1,1,da[self.foreground]:rep(self.width)) while bb<=self.width and ab<=#self.items do local cb=self.items[ab] if bb+#cb-1 +self.spacing<=self.width then self:addText(bb,1,cb)if ab==self.selectedIndex then self:addBg(bb,1,da[self.selectionBackground]:rep( #cb)) self:addFg(bb,1,da[self.selectionForeground]:rep(#cb))end;bb=bb+ #cb+self.spacing else break end;ab=ab+1 end end function _b:mouse_scroll(ab,bb,cb) if(ba.mouse_scroll(self,ab,bb,cb))then if ab==1 and self.scrollIndex<#self.items- self:getVisibleItems()+1 then self.scrollIndex=self.scrollIndex+1 elseif ab==-1 and self.scrollIndex>1 then self.scrollIndex=self.scrollIndex-1 end;self:updateRender()return true end end function _b:getVisibleItems()local ab=0;local bb=self.scrollIndex;local cb=1 while cb<=self.width and bb<=#self.items do local db=self.items[bb] if cb+#db-1 +self.spacing<= self.width then ab=ab+1;cb=cb+#db+self.spacing else if cb+#db-1 <= self.width then ab=ab+1 end;break end;bb=bb+1 end;return ab end;return _b end bundled_basaltContent["Modules/elements/Monitor"] = function(...) local ca,da,_b,ab=type,string.len,string.rep,string.sub local bb=require("basaltLoader")local cb=bb.load("Container")local db=setmetatable({},cb) db.__index=db;db:initialize("Monitor") db:addProperty("Monitor","any",nil,nil,function(_c,ac,bc)if(ca(ac=="string"))then ac=peripheral.wrap(ac)end;if(bc~=false)then _c:setSide(peripheral.getName(ac),false)end;_c:setSize(ac.getSize()) _c:setTerm(ac)return ac end) db:addProperty("Side","string",nil,nil,function(_c,ac,bc) if(ca(ac)=="string")then if(peripheral.isPresent(ac))then if( peripheral.getType(ac)=="monitor")then if(_c:getMonitor()==nil)then if(bc~=false)then _c:setMonitor(ac,false)end end;return ac end end end end) function db:new(_c,ac,bc)local cc=cb:new(_c,ac,bc)setmetatable(cc,self) self.__index=self;cc:setType("Monitor")cc:create("Monitor")return cc end function db:event(_c,...)cb.event(self,_c,...) if(_c=="monitor_resize")then local ac=self:getMonitor()self:setSize(ac.getSize())self:setTerm(ac)end end;function db:monitor_touch(_c,...) if(_c==self:getSide())then self.basalt.setFocusedFrame(self)self:mouse_click(1,...)end end;function db:lose_focus() cb.lose_focus(self)self:setCursor(false)end;return db end bundled_basaltContent["Modules/elements/MovableFrame"] = function(...)  local d=require("basaltLoader").load("Container")local _a=require("expect").expect;local aa=setmetatable({},d) aa.__index=aa;aa:initialize("MovableFrame") aa:addProperty("dragMap","table",{{x=1,y=1,w=0,h=1}}) function aa:new(ba,ca,da)local _b=d:new(ba,ca,da)setmetatable(_b,self) self.__index=self;_b:setType("MovableFrame") _b:create("MovableFrame")_b:setZ(10)_b:setSize(30,15)return _b end aa:extend("Load",function(ba)ba:listenEvent("mouse_click") ba:listenEvent("mouse_up")ba:listenEvent("mouse_drag")end) function aa:isInDragMap(ba,ca)_a(1,self,"table")_a(2,ba,"number") _a(3,ca,"number")local da,_b=self:getRelativePosition(ba,ca) for ab,bb in pairs(self.dragMap)do local cb,db= bb.w-1,bb.h-1;if(bb.w<=0)then cb=self.width end;if(bb.h<=0)then db=self.height end if( da>=bb.x and da<=bb.x+cb and _b>=bb.y and _b<=bb.y+db)then return true end end;return false end function aa:addDragArea(ba,ca,da,_b)_a(1,self,"table")_a(2,ba,"number") _a(3,ca,"number")_a(4,da,"number")_a(5,_b,"number") table.insert(self.dragMap,{x=ba,y=ca,w=da,h=_b})return self end function aa:mouse_click(ba,ca,da) if(d.mouse_click(self,ba,ca,da))then if(ba==1)then if(self:isInDragMap(ca,da))then self.isDragging=true;self.dragX=ca;self.dragY=da end return true end end end function aa:mouse_up(ba,ca,da)self.isDragging=false;return d.mouse_up(self,ba,ca,da)end function aa:mouse_drag(ba,ca,da)d.mouse_drag(self,ba,ca,da) if(self.isDragging)then local _b=ca-self.dragX;local ab=da-self.dragY;self.dragX=ca;self.dragY=da;self:setPosition(self.x+_b, self.y+ab)return true end end;return aa end bundled_basaltContent["Modules/elements/Program"] = function(...) local da=require("basaltLoader") local _b=da.load("VisualElement")local ab=require("utils").tHex local bb=require("expect").expect local cb=dofile("rom/modules/main/cc/require.lua").make;local db=string.sub local function _c(bc)local cc,dc=1,1;local _d=true;local ad=true;local bd,cd=1,1 local dd,__a=colors.white,colors.black;local a_a={}local b_a={{},{},{}}local c_a=""local d_a={} local function _aa()c_a=(" "):rep(cc)for n=0,15 do local _ca=2 ^n d_a[_ca]=ab[_ca]:rep(cc)end end local function aaa(_ca,aca)cc,dc=_ca,aca;_aa()local bca=c_a;local cca=d_a[dd]local dca=d_a[__a] for n=1,dc do b_a[1][n]=db( b_a[1][n]==nil and bca or b_a[1][n].. bca:sub(1,cc-b_a[1][n]:len()),1,cc) b_a[2][n]=db(b_a[2][n]==nil and cca or b_a[2][n]..cca:sub(1,cc- b_a[2][n]:len()),1,cc) b_a[3][n]=db(b_a[3][n]==nil and dca or b_a[3][n]..dca:sub(1,cc- b_a[3][n]:len()),1,cc)end end;local function baa() if bd>=1 and cd>=1 and bd<=cc and cd<=dc then else end end local function caa(_ca,aca,bca)if cd<1 or cd>dc or bd<1 or bd+#_ca-1 >cc then return end b_a[1][cd]=db(b_a[1][cd],1, bd-1).._ca..db(b_a[1][cd],bd+#_ca,cc)b_a[2][cd]=db(b_a[2][cd],1,bd-1).. aca..db(b_a[2][cd],bd+#_ca,cc) b_a[3][cd]=db(b_a[3][cd],1, bd-1)..bca..db(b_a[3][cd],bd+#_ca,cc)bd=bd+#_ca;if _d then baa()end;bc:updateRender()end local daa=function(_ca) if type(_ca)~="number"then error("bad argument #1 (expected number, got "..type(_ca)..")",2)elseif ab[_ca]==nil then error("Invalid color (got ".._ca..")",2)end;dd=_ca end local _ba=function(_ca) if type(_ca)~="number"then error("bad argument #1 (expected number, got "..type(_ca)..")",2)elseif ab[_ca]==nil then error("Invalid color (got ".._ca..")",2)end;__a=_ca end local aba=function(_ca,aca,bca,cca)if type(_ca)~="number"then error("bad argument #1 (expected number, got "..type(_ca)..")",2)end if ab[_ca]==nil then error("Invalid color (got ".. _ca..")",2)end;local dca if type(aca)=="number"and bca==nil and cca==nil then dca={colours.rgb8(aca)}a_a[_ca]=dca else if type(aca)~="number"then error("bad argument #2 (expected number, got "..type(aca)..")",2)end;if type(bca)~="number"then error( "bad argument #3 (expected number, got "..type(bca)..")",2)end;if type(cca)~="number"then error( "bad argument #4 (expected number, got "..type(cca)..")",2)end;dca=a_a[_ca]dca[1]=aca dca[2]=bca;dca[3]=cca end end local bba=function(_ca)if type(_ca)~="number"then error("bad argument #1 (expected number, got "..type(_ca)..")",2)end if ab[_ca]==nil then error("Invalid color (got ".. _ca..")",2)end;local aca=a_a[_ca]return aca[1],aca[2],aca[3]end local cba={setCursorPos=function(_ca,aca)if type(_ca)~="number"then error("bad argument #1 (expected number, got "..type(_ca)..")",2)end;if type(aca)~="number"then error( "bad argument #2 (expected number, got "..type(aca)..")",2)end;bd=math.floor(_ca) cd=math.floor(aca)if(_d)then baa()end end,getCursorPos=function()return bd,cd end,setCursorBlink=function(_ca)if type(_ca)~="boolean"then error("bad argument #1 (expected boolean, got ".. type(_ca)..")",2)end;ad=_ca end,getCursorBlink=function()return ad end,getPaletteColor=bba,getPaletteColour=bba,setBackgroundColor=_ba,setBackgroundColour=_ba,setTextColor=daa,setTextColour=daa,setPaletteColor=aba,setPaletteColour=aba,getBackgroundColor=function()return __a end,getBackgroundColour=function()return __a end,getSize=function()return cc,dc end,getTextColor=function()return dd end,getTextColour=function()return dd end,getRenderData=function()return b_a end,scroll=function(_ca) assert(type(_ca)=="number", "bad argument #1 (expected number, got "..type(_ca)..")") if _ca~=0 then for newY=1,dc do local aca=newY+_ca if aca<1 or aca>dc then b_a[1][newY]=c_a b_a[2][newY]=d_a[dd]b_a[3][newY]=d_a[__a]else b_a[1][newY]=b_a[1][aca] b_a[2][newY]=b_a[2][aca]b_a[3][newY]=b_a[3][aca]end end end;if(_d)then baa()end end,isColor=function()return bc.basalt.getTerm().isColor()end,isColour=function()return bc.basalt.getTerm().isColor()end,write=function(_ca)_ca=tostring(_ca)if(_d)then caa(_ca,ab[dd]:rep(_ca:len()),ab[__a]:rep(_ca:len()))end end,clearLine=function()if (_d)then bd=1 caa((" "):rep(cc),ab[dd]:rep(cc),ab[__a]:rep(cc))end end,clear=function() for n=1,dc do b_a[1][n]=c_a;b_a[2][n]=d_a[dd]b_a[3][n]=d_a[__a]end;if(_d)then baa()end end,blit=function(_ca,aca,bca)if type(_ca)~="string"then error("bad argument #1 (expected string, got "..type(_ca)..")",2)end;if type(aca)~="string"then error( "bad argument #2 (expected string, got "..type(aca)..")",2)end;if type(bca)~="string"then error( "bad argument #3 (expected string, got "..type(bca)..")",2)end if #aca~=#_ca or#bca~=#_ca then error("Arguments must be the same length",2)end;if(_d)then caa(_ca,aca,bca)end end}local dba={} return {setSize=function(_ca,aca)aaa(_ca,aca)end,setVisible=function(_ca)_d=_ca end,setCursorBlink=function(_ca)ad=_ca end,getCursorBlink=function() return ad end,start=function(_ca,aca,...)local bca={...}aca=aca or{}dba={}dba.window=cba cba.current=term.current;cba.redirect=term.redirect if(type(_ca)=="string")then dba.coroutine=coroutine.create(function() local _da=shell.resolveProgram(_ca)local ada=setmetatable(aca,{__index=_ENV})ada.shell=shell;if (_da==nil)then error("The path ".._ca.." does not exist!")end ada.require,ada.package=cb(ada,fs.getDir(_da)) if(fs.exists(_da))then local bda=fs.open(_da,"r")local cda=bda.readAll() bda.close()local dda=load(cda,_ca,"bt",ada)if(dda~=nil)then term.redirect(dba.window)local __b=dda(_ca,table.unpack(bca)) term.redirect(bc.basalt.getTerm())return __b end end end)elseif(type(_ca)=="function")then dba.coroutine=coroutine.create(function() _ca(table.unpack(bca))end)else return end;local cca,dca=coroutine.resume(dba.coroutine)if not cca then error(dca)end end,resume=function(_ca,...) term.redirect(dba.window)if(dba.coroutine==nil)then return end;if(dba.filter~=nil)then if(_ca~=dba.filter)then return end;dba.filter=nil end local aca,bca=coroutine.resume(dba.coroutine,_ca,...)if aca then dba.filter=bca else end term.redirect(bc.basalt.getTerm())return aca,bca end,stop=function() dba={}end,getProcess=function()return dba end,getRenderData=function()return cba.getRenderData()end,getStatus=function()return coroutine.status(dba.coroutine)end,isDead=function()return coroutine.status(dba.coroutine)=="dead"end}end;local ac=setmetatable({},_b)ac.__index=ac ac:initialize("Program")ac:addProperty("program","table") function ac:new(bc,cc,dc) local _d=_b:new(bc,cc,dc)setmetatable(_d,self)self.__index=self _d:setType("Program")_d:create("Program")_d:setSize(20,8) _d:setProgram(_c(_d))_d.program.setSize(20,8)_d:setZ(5)return _d end function ac:render()_b.render(self) local bc=self.program.getRenderData()for cc,dc in ipairs(bc[1])do self:addBlit(1,cc,bc[1][cc],bc[2][cc],bc[3][cc])end end;function ac:start(bc,cc,...)bb(1,self,"table")bb(2,bc,"string","function") self.program.start(bc,cc,...)end function ac:stop() bb(1,self,"table")self.program.stop()return self end ac:extend("Load",function(bc)bc:listenEvent("mouse_click") bc:listenEvent("mouse_up")bc:listenEvent("mouse_scroll") bc:listenEvent("mouse_drag")end)function ac:event(...)self.program.resume(...)end;function ac:mouse_click(...) if (_b.mouse_click(self,...))then self.program.resume("mouse_click",...)return true end end;function ac:mouse_up(...) if (_b.mouse_up(self,...))then self.program.resume("mouse_up",...)return true end end;function ac:mouse_scroll(...) self.program.resume("mouse_scroll",...)end function ac:mouse_drag(...)if(_b.mouse_drag(self,...))then self.program.resume("mouse_drag",...)return true end end function ac:key(...)if(_b.key(self,...))then self.program.resume("key",...) return true end end function ac:key_up(...)if(_b.key_up(self,...))then self.program.resume("key_up",...)return true end end function ac:char(...)if(_b.char(self,...))then self.program.resume("char",...)return true end end;return ac end bundled_basaltContent["Modules/elements/Progressbar"] = function(...) local d=require("basaltLoader") local _a=d.load("VisualElement")local aa=setmetatable({},_a)aa.__index=aa aa:initialize("Progressbar")aa:addProperty("progress","number",0) aa:addProperty("progressBackground","color",colors.black)aa:addProperty("minValue","number",0) aa:addProperty("maxValue","number",100) function aa:new(ba,ca,da)local _b=_a:new(ba,ca,da)setmetatable(_b,self) self.__index=self;_b:setType("Progressbar")_b:create("Progressbar") _b:setSize(20,3)return _b end function aa:render()_a.render(self)local ba=self:getWidth() local ca=self:getHeight()local da=self:getProgress()local _b=self:getMinValue() local ab=self:getMaxValue()local bb=self:getProgressBackground()local cb=math.floor((ba-2)* (da-_b)/ (ab-_b)) self:addBackgroundBox(1,1,cb,ca,bb)end;return aa end bundled_basaltContent["Modules/elements/ScrollableFrame"] = function(...)  local aa=require("basaltLoader").load("Container")local ba=require("expect").expect local ca=setmetatable({},aa)ca.__index=ca;ca:initialize("ScrollableFrame") ca:addProperty("scrollDirection","string","vertical")ca:addProperty("autoScroll","boolean",true) ca:addProperty("scrollAmount","number",10) function ca:new(ab,bb,cb)local db=aa:new(ab,bb,cb)setmetatable(db,self) self.__index=self;db:setType("ScrollableFrame") db:create("ScrollableFrame")db:setZ(10)db:setSize(30,15)return db end ca:extend("Load",function(ab)ab:listenEvent("mouse_scroll")end)local function da(ab)local bb=0;for cb,db in pairs(ab:getChildren())do bb=math.max(bb,db:getY()+db:getHeight())end return bb-ab:getHeight()end local function _b(ab) local bb=0;for cb,db in pairs(ab:getChildren())do bb=math.max(bb,db:getX()+db:getWidth())end;return bb-ab:getWidth()end function ca:scrollVertical(ab)ba(1,self,"table")ba(2,ab,"number") local bb=self:getAutoScroll()local cb=0;local db=self:getYOffset()local _c=self:getHeight() if(bb)then cb=da(self)else cb=self:getScrollAmount()+_c end if(ab>0)then if(db<cb)then self:setYOffset(db+ab)end else if(db>0)then self:setYOffset( db+ab)end end;self:updateRender()return self end function ca:getAllowedScrollAmount()ba(1,self,"table") local ab=self:getScrollDirection() if not(self:getAutoScroll())then return self:getScrollAmount()end;if(ab=="vertical")then return da(self)else return _b(self)end end function ca:scrollHorizontal(ab)ba(1,self,"table")ba(2,ab,"number") local bb=self:getAutoScroll()local cb=0;local db=self:getXOffset()local _c=self:getWidth() if(bb)then cb=_b(self)else cb=self:getScrollAmount()+_c end if(ab>0)then if(db<cb)then self:setXOffset(db+ab)end else if(db>0)then self:setXOffset( db+ab)end end;self:updateRender()return self end function ca:mouse_scroll(ab,bb,cb) if(aa.mouse_scroll(self,ab,bb,cb))then local db=self:getScrollDirection()if(db=="vertical")then self:scrollVertical(ab)else self:scrollHorizontal(ab)end;return true end end;return ca end bundled_basaltContent["Modules/elements/Slider"] = function(...) local aa=require("basaltLoader") local ba=aa.load("VisualElement")local ca=require("utils").tHex;local da=setmetatable({},ba) da.__index=da;da:initialize("Slider") da:addProperty("knobSymbol","string"," ") da:addProperty("knobBackground","color",colors.black) da:addProperty("knobForeground","color",colors.black)da:addProperty("bgSymbol","string","\140") da:addProperty("value","number",0)da:addProperty("minValue","number",0) da:addProperty("maxValue","number",100)da:addProperty("step","number",1) da:combineProperty("knob","knobSymbol","knobBackground","knobForeground")da:addListener("change","value_change") function da:new(ab,bb,cb) local db=ba:new(ab,bb,cb)setmetatable(db,self)self.__index=self db:setType("Slider")db:create("Slider")db:setSize(20,1)return db end da:extend("Load",function(ab)ab:listenEvent("mouse_click") ab:listenEvent("mouse_drag")ab:listenEvent("mouse_up") ab:listenEvent("mouse_scroll")end) local function _b(ab,bb,cb)local db,_c=ab:getPosition()local ac,bc=ab:getSize() local cc=ab:getValue()local dc=ab:getMaxValue()local _d=ab:getMinValue() local ad=ab:getStep()local bd=bb-db;cc=bd/ (ac-1)* (dc-_d)+_d;cc=math.floor( (cc+ad/2)/ad)*ad cc=math.max(_d,math.min(dc,cc))ab:setValue(cc)ab:fireEvent("change",cc) ab:updateRender()end function da:mouse_click(ab,bb,cb)if(ba.mouse_click(self,ab,bb,cb))then if(ab==1)then _b(self,bb,cb)end;return true end end function da:mouse_drag(ab,bb,cb)if(ba.mouse_drag(self,ab,bb,cb))then if(ab==1)then _b(self,bb,cb)end;return true end end function da:mouse_scroll(ab,bb,cb) if ba.mouse_scroll(self,ab,bb,cb)then local db=self:getValue() local _c=self:getMinValue()local ac=self:getMaxValue()local bc=self:getWidth() local cc=(ac-_c)/ (bc-1)if ab==1 then db=db+cc else db=db-cc end db=math.max(_c,math.min(db,ac))self:setValue(db)self:fireEvent("change",db) self:updateRender()return true end end function da:render()ba.render(self) local ab=(self.bgSymbol):rep(self.width) local bb=math.floor( (self.value-self.minValue)/ (self.maxValue-self.minValue)* (self.width-1)+0.5) ab=ab:sub(1,bb)..self.knobSymbol..ab:sub(bb+2,-1)self:addText(1,1,ab) self:addBg(bb+1,1,ca[self:getKnobBackground()]) self:addFg(bb+1,1,ca[self:getKnobForeground()])end;return da end bundled_basaltContent["Modules/elements/Textfield"] = function(...) local _a=require("basaltLoader") local aa=_a.load("VisualElement")local ba=require("expect").expect local ca=setmetatable({},aa)ca.__index=ca;ca:initialize("TextField") ca:addProperty("lines","table",{""})ca:addProperty("lineIndex","number",1) ca:addProperty("scrollIndexX","number",1)ca:addProperty("scrollIndexY","number",1) ca:addProperty("cursorIndex","number",1) function ca:new(da,_b,ab)local bb=aa:new(da,_b,ab)setmetatable(bb,self) self.__index=self;bb:setType("TextField")bb:create("TextField") bb:setSize(10,5)return bb end ca:extend("Load",function(da)da:listenEvent("mouse_click") da:listenEvent("mouse_up")da:listenEvent("mouse_scroll")end) function ca:render()aa.render(self) for i=1,self.height do local da="" if self.lines[i+self.scrollIndexY-1]~=nil then local ab=self.lines[i+self.scrollIndexY-1] da=ab:sub(self.scrollIndexX,self.scrollIndexX+self.width-1)end;local _b=(" "):rep(self.width-da:len()) da=da.._b;self:addText(1,i,da)end end;function ca:lose_focus()aa.lose_focus(self) self.parent:setCursor(false)end function ca:adjustScrollIndices(da) if da then if self.cursorIndex<self.scrollIndexX then self.scrollIndexX=self.cursorIndex elseif self.cursorIndex>= self.scrollIndexX+self.width then self.scrollIndexX=self.cursorIndex-self.width+1 end if self.lineIndex<self.scrollIndexY then self.scrollIndexY=self.lineIndex elseif self.lineIndex>=self.scrollIndexY+self.height then self.scrollIndexY=self.lineIndex- self.height+1 end end;self.scrollIndexX=math.max(1,self.scrollIndexX) self.scrollIndexY=math.max(1,self.scrollIndexY)end function ca:updateCursor()ba(1,self,"table") if   self.cursorIndex>=self.scrollIndexX and self.cursorIndex<self.scrollIndexX+self.width and self.lineIndex>=self.scrollIndexY and self.lineIndex<self.scrollIndexY+self.height then self.parent:setCursor(true,self.x+self.cursorIndex-self.scrollIndexX, self.y+self.lineIndex-self.scrollIndexY,self:getForeground())else self.parent:setCursor(false)end end;function ca:addLine(da)ba(1,self,"table")ba(2,da,"string") table.insert(self.lines,da)return self end function ca:removeLine(da) ba(1,self,"table")ba(2,da,"number")table.remove(self.lines,da)return self end function ca:clear()ba(1,self,"table")self.lines={}return self end;function ca:getLine(da)ba(1,self,"table")ba(2,da,"number") return self.lines[da]end function ca:setLine(da,_b)ba(1,self,"table") ba(2,da,"number")ba(3,_b,"string")self.lines[da]=_b;return self end function ca:mouse_click(da,_b,ab) if(aa.mouse_click(self,da,_b,ab))then if(da==1)then if(#self.lines>0)then self.lineIndex=math.min( ab-self.y+self.scrollIndexY,#self.lines) self.cursorIndex=math.min(_b-self.x+self.scrollIndexX, self.lines[self.lineIndex]:len()+1)self:adjustScrollIndices(true)else self.lineIndex=1 self.cursorIndex=1 end end;return true end end function ca:mouse_up(da,_b,ab)if(aa.mouse_up(self,da,_b,ab))then if(da==1)then self:updateCursor()end;return true end end function ca:mouse_scroll(da,_b,ab) if(aa.mouse_scroll(self,da,_b,ab))then if da==1 then self.scrollIndexY=math.min(#self.lines- self.height+1,self.scrollIndexY+1)elseif da==-1 then self.scrollIndexY=math.max(1,self.scrollIndexY-1)end;self:adjustScrollIndices(false) self:updateCursor()self:updateRender()return true end end function ca:key(da) if(aa.key(self,da))then local _b=self.lines[self.lineIndex] if da==keys.enter then local ab=_b:sub(1,self.cursorIndex-1) local bb=_b:sub(self.cursorIndex,-1)self.lines[self.lineIndex]=ab table.insert(self.lines,self.lineIndex+1,bb)self.lineIndex=self.lineIndex+1;self.cursorIndex=1 elseif da==keys.backspace then if _b~=""and self.cursorIndex>1 then local ab=_b:sub(1,self.cursorIndex-2)local bb=_b:sub(self.cursorIndex,-1)self.lines[self.lineIndex]= ab..bb;self.cursorIndex=self.cursorIndex-1 elseif _b==""and self.lineIndex>1 then table.remove(self.lines,self.lineIndex)self.lineIndex=self.lineIndex-1;self.cursorIndex= self.lines[self.lineIndex]:len()+1 elseif self.cursorIndex==1 and self.lineIndex>1 then self.cursorIndex= self.lines[self.lineIndex-1]:len()+1 self.lines[self.lineIndex-1]=self.lines[ self.lineIndex-1]..self.lines[self.lineIndex]table.remove(self.lines,self.lineIndex)self.lineIndex= self.lineIndex-1 end elseif da==keys.delete then if _b~=""and self.cursorIndex<=_b:len()then local ab=_b:sub(1, self.cursorIndex-1) local bb=_b:sub(self.cursorIndex+1,-1)self.lines[self.lineIndex]=ab..bb elseif _b==""and self.lineIndex< #self.lines then table.remove(self.lines,self.lineIndex)elseif self.cursorIndex==_b:len()+1 and self.lineIndex<#self.lines then self.lines[self.lineIndex]=self.lines[self.lineIndex].. self.lines[self.lineIndex+1]table.remove(self.lines, self.lineIndex+1)end elseif da==keys.up and self.lineIndex>1 then self.lineIndex=self.lineIndex-1 self.cursorIndex=math.min(self.cursorIndex, self.lines[self.lineIndex]:len()+1)elseif da==keys.down and self.lineIndex<#self.lines then self.lineIndex= self.lineIndex+1 self.cursorIndex=math.min(self.cursorIndex, self.lines[self.lineIndex]:len()+1)elseif da==keys.left then self.cursorIndex=math.max(1,self.cursorIndex-1)elseif da==keys.right then self.cursorIndex=math.min(_b:len()+1,self.cursorIndex+1)end;self:adjustScrollIndices(true) self:updateCursor()self:updateRender()return true end end function ca:char(da) if(aa.char(self,da))then local _b=self.lines[self.lineIndex]local ab=_b:sub(1, self.cursorIndex-1) local bb=_b:sub(self.cursorIndex,-1)self.lines[self.lineIndex]=ab..da..bb;self.cursorIndex= self.cursorIndex+1;self:adjustScrollIndices(true) self:updateCursor()self:updateRender()return true end end;return ca end bundled_basaltContent["Modules/elements/VisualElement"] = function(...)  local ba=require("basaltLoader").load("BasicElement")local ca=require("utils").splitString local da=require("utils").subText;local _b=require("expect").expect local ab=setmetatable({},ba)ab.__index=ab;ab:initialize("VisualElement") ab:addProperty("background","color",colors.black) ab:addProperty("foreground","color",colors.white) ab:addProperty("x","number",1,nil,function(cb,db)cb:reposition("x",db)end) ab:addProperty("y","number",1,nil,function(cb,db)cb:reposition("y",db)end)ab:combineProperty("Position","X","Y") ab:addProperty("visible","boolean",true) ab:addProperty("width","number",1,nil,function(cb,db)cb:resize("width",db)end) ab:addProperty("height","number",1,nil,function(cb,db)cb:resize("height",db)end)ab:addProperty("preRenderData","table",{}) ab:addProperty("postRenderData","table",{})ab:combineProperty("Size","width","height") ab:addProperty("transparency","boolean",false)ab:addProperty("ignoreOffset","boolean",false) ab:addProperty("focused","boolean",false, nil,function(cb,db)if(db)then cb:get_focus()else cb:lose_focus()end end)ab:addListener("click","mouse_click") ab:addListener("drag","mouse_drag")ab:addListener("scroll","mouse_scroll") ab:addListener("hover","mouse_move")ab:addListener("leave","mouse_move2") ab:addListener("clickUp","mouse_up")ab:addListener("key","key") ab:addListener("keyUp","key_up")ab:addListener("char","char") ab:addListener("getFocus","get_focus")ab:addListener("loseFocus","lose_focus") ab:addListener("release","mouse_release")ab:addListener("resize","resize") ab:addListener("reposition","reposition") function ab:new(cb,db,_c)local ac=ba:new(cb,db,_c)setmetatable(ac,self) self.__index=self;ac:create("VisualElement") ac:setType("VisualElement")return ac end;function ab:preRender()end function ab:render()local cb,db=self:getSize() self:addTextBox(1,1,cb,db," ") self:addBackgroundBox(1,1,cb,db,self:getBackground()) self:addForegroundBox(1,1,cb,db,self:getForeground())end;function ab:postRender()end function ab:processRender()self:preRender()for cb,db in pairs(self:getPreRenderData())do self["add"..db.cmd](self,unpack(db.args))end;self:render()for cb,db in pairs(self:getPostRenderData())do self["add"..db.cmd](self,unpack(db.args))end;self:postRender()end;local bb="pre" for _=1,2 do for cb,db in pairs({"Text","Bg","Fg"})do ab[bb..db]=function(_c,ac,bc,cc) local dc=_c:getPreRenderData()if(bb=="post")then dc=_c:getPostRenderData()end table.insert(dc,{cmd=db,args={ac,bc,cc}})_c:updateRender()return _c end end for cb,db in pairs({"BackgroundBox","TextBox","ForegroundBox"})do ab[bb..db]=function(_c,ac,bc,cc,dc,_d) local ad=_c:getPreRenderData()if(bb=="post")then ad=_c:getPostRenderData()end table.insert(ad,{cmd=db,args={ac,bc,cc,dc,_d}})_c:updateRender()return _c end end ab[bb.."Blit"]=function(cb,db,_c,ac,bc,cc)if(#ac~=#bc)or(#ac~=#cc)then error("Text, Foreground and Background must have the same length!")end local dc=cb:getPreRenderData()if(bb=="post")then dc=cb:getPostRenderData()end table.insert(dc,{cmd="Blit",args={db,_c,ac,bc,cc}})cb:updateRender()return cb end;bb="post"end;function ab:clearPreRender()_b(1,self,"table")self:setPreRenderData({}) self:updateRender()return self end;function ab:clearPostRender() _b(1,self,"table")self:setPostRenderData({})self:updateRender() return self end function ab:calculatePosition() local cb,db=self:getPosition()local _c=self:getIgnoreOffset() if not(_c)then if self.parent~=nil then local ac,bc=self.parent:getOffset()cb=cb-ac;db=db-bc end end;return cb,db end for cb,db in pairs({"BackgroundBox","TextBox","ForegroundBox"})do ab["add"..db]=function(_c,ac,bc,cc,dc,_d)local ad= _c.parent or _c;local bd,cd=_c:calculatePosition()ad["draw"..db](ad, ac+bd-1,bc+cd-1,cc,dc,_d)end end for cb,db in pairs({"Text","Bg","Fg"})do ab["add"..db]=function(_c,ac,bc,cc,dc)local _d=_c.parent or _c local ad,bd=_c:calculatePosition()local cd,dd=_c:getSize()local __a=_c:getTransparency()if not(dc)then cc,ac=da(cc,ac,cd)end;if not(__a)then _d["set"..db](_d,ac+ad-1,bc+bd-1,cc)return end;local a_a=ca(cc) for b_a,c_a in pairs(a_a)do if(c_a=="Text")then if (c_a.value~="")and(c_a.value~="\0")then _d["set"..c_a](_d,ac+c_a.x+ad-2, bc+bd-1,c_a.value)end else if(c_a.value~="")and(c_a.value~=" ")then _d["set"..c_a](_d, ac+c_a.x+ad-2,bc+bd-1,c_a.value)end end end end end function ab:addBlit(cb,db,_c,ac,bc)local cc=self.parent or self local dc,_d=self:calculatePosition()local ad=self:getTransparency()if not(ad)then cc:blit(cb+dc-1,db+_d-1,_c,ac,bc)return end;local bd=ca(_c,"\0")local cd=ca(ac) local dd=ca(bc)for __a,a_a in pairs(bd)do if(a_a.value~="")or(a_a.value~="\0")then cc:setText( cb+a_a.x+dc-2,db+_d-1,a_a.value)end end for __a,a_a in pairs(dd)do if (a_a.value~="")or(a_a.value~=" ")then cc:setBg(cb+a_a.x+dc-2,db+_d-1,a_a.value)end end;for __a,a_a in pairs(cd)do if(a_a.value~="")or(a_a.value~=" ")then cc:setFg(cb+a_a.x+dc- 2,db+_d-1,a_a.value)end end end function ab:getRelativePosition(cb,db)_b(1,self,"table")_b(2,cb,"number","nil") _b(3,db,"number","nil") if(cb==nil)and(db==nil)then cb,db=self:calculatePosition()end;local _c,ac=self:calculatePosition()local bc=cb- (_c-1) local cc=db- (ac-1)return bc,cc end function ab:getAbsolutePosition(cb,db)_b(1,self,"table")_b(2,cb,"number","nil") _b(3,db,"number","nil") if(cb==nil)and(db==nil)then cb,db=self:calculatePosition()end;local _c,ac=self:calculatePosition()local bc=cb+ (_c-1) local cc=db+ (ac-1) if self:isType("Container")then local dc,_d=self:getOffset()bc=bc+dc;cc=cc+_d end;if self.parent~=nil then bc,cc=self.parent:getAbsolutePosition(bc,cc)end;return bc,cc end function ab:isInside(cb,db)_b(1,self,"table")_b(2,cb,"number") _b(3,db,"number")local _c,ac=self:calculatePosition()local bc,cc=self:getSize() local dc,_d=self:getVisible(),self:getEnabled() return cb>=_c and cb<=_c+bc-1 and db>=ac and db<=ac+cc-1 and dc and _d end function ab:mouse_click(cb,db,_c) if self:isInside(db,_c)then self:setProperty("clicked",true)self:setProperty("dragging",true) self:updateRender() self:fireEvent("click",cb,self:getRelativePosition(db,_c))return true end end function ab:mouse_drag(cb,db,_c)if self:getProperty("dragging")then self:fireEvent("drag",cb,self:getRelativePosition(db,_c))return true end end function ab:mouse_up(cb,db,_c) if self:isInside(db,_c)then self:fireEvent("clickUp",cb,self:getRelativePosition(db,_c))self:updateRender()return true end end function ab:mouse_release(cb,db,_c)self:setProperty("dragging",false) self:setProperty("clicked",false) self:fireEvent("release",cb,self:getRelativePosition(db,_c))return true end function ab:mouse_scroll(cb,db,_c)if self:isInside(db,_c)then self:fireEvent("scroll",cb,self:getRelativePosition(db,_c))return true end end function ab:mouse_move(cb,db,_c) if self:isInside(db,_c)then self:setProperty("hovered",true)self:updateRender() self:fireEvent("hover",self:getRelativePosition(db,_c))return true end if(self:getProperty("hovered"))then self:setProperty("hovered",false)self:updateRender() self:fireEvent("leave",self:getRelativePosition(db,_c))return true end end function ab:reposition(cb,db,_c)self:fireEvent("reposition",db,_c)end function ab:resize(cb,db,_c)self:fireEvent("resize",db,_c)end;function ab.get_focus(cb)cb:fireEvent("getFocus")end;function ab.lose_focus(cb) cb:fireEvent("loseFocus")end for cb,db in pairs({"key","key_up","char"})do ab[db]=function(_c,...) if (_c.enabled)and(_c.visible)then if(_c.parent==nil)or(_c:getFocused())then _c:fireEvent(db,...)return true end end end end;return ab end bundled_basaltContent["Modules/extensions/animations"] = function(...)  local cda,dda,__b,a_b,b_b,c_b=math.floor,math.sin,math.cos,math.pi,math.sqrt,math.pow;local function d_b(_dc,adc,bdc)return _dc+ (adc-_dc)*bdc end local function _ab(_dc)return _dc end;local function aab(_dc)return 1 -_dc end local function bab(_dc)return _dc*_dc*_dc end;local function cab(_dc)return aab(bab(aab(_dc)))end;local function dab(_dc)return d_b(bab(_dc),cab(_dc),_dc)end;local function _bb(_dc) return dda((_dc*a_b)/2)end local function abb(_dc)return aab(__b((_dc*a_b)/2))end local function bbb(_dc)return- (__b(a_b*_dc)-1)/2 end local function cbb(_dc)local adc=1.70158;local bdc=adc+1;return bdc*_dc^3 -adc*_dc^2 end;local function dbb(_dc)return _dc^3 end;local function _cb(_dc)local adc=(2 *a_b)/3 return _dc==0 and 0 or(_dc==1 and 1 or (-2 ^ ( 10 *_dc-10)*dda((_dc*10 -10.75)*adc)))end local function acb(_dc)return _dc==0 and 0 or 2 ^ (10 *_dc-10)end local function bcb(_dc)local adc=1.70158;local bdc=adc*1.525;return _dc<0.5 and( (2 *_dc)^2 * ( (bdc+1)*2 *_dc-bdc))/2 or ( (2 *_dc-2)^2 * ( (bdc+1)* (_dc*2 -2)+bdc)+2)/2 end;local function ccb(_dc)return _dc<0.5 and 4 *_dc^3 or 1 - (-2 *_dc+2)^3 /2 end local function dcb(_dc) local adc=(2 *a_b)/4.5 return _dc==0 and 0 or(_dc==1 and 1 or ( _dc<0.5 and- (2 ^ (20 *_dc-10)* dda((20 *_dc-11.125)*adc))/2 or (2 ^ (-20 *_dc+10)*dda((20 *_dc-11.125)*adc))/2 +1))end local function _db(_dc)return _dc==0 and 0 or(_dc==1 and 1 or ( _dc<0.5 and 2 ^ (20 *_dc-10)/2 or(2 -2 ^ (-20 *_dc+10))/2))end;local function adb(_dc)return _dc<0.5 and 2 *_dc^2 or 1 - (-2 *_dc+2)^2 /2 end;local function bdb(_dc)return _dc<0.5 and 8 * _dc^4 or 1 - (-2 *_dc+2)^4 /2 end;local function cdb(_dc)return _dc<0.5 and 16 * _dc^5 or 1 - (-2 *_dc+2)^5 /2 end;local function ddb(_dc) return _dc^2 end;local function __c(_dc)return _dc^4 end local function a_c(_dc)return _dc^5 end;local function b_c(_dc)local adc=1.70158;local bdc=adc+1;return 1 +bdc* (_dc-1)^3 +adc* (_dc-1)^2 end;local function c_c(_dc)return 1 - (1 -_dc)^3 end local function d_c(_dc)local adc=(2 *a_b)/3;return  _dc==0 and 0 or(_dc==1 and 1 or( 2 ^ (-10 *_dc)*dda((_dc*10 -0.75)*adc)+1))end local function _ac(_dc)return _dc==1 and 1 or 1 -2 ^ (-10 *_dc)end;local function aac(_dc)return 1 - (1 -_dc)* (1 -_dc)end;local function bac(_dc)return 1 - ( 1 -_dc)^4 end;local function cac(_dc) return 1 - (1 -_dc)^5 end;local function dac(_dc) return 1 -b_b(1 -c_b(_dc,2))end local function _bc(_dc)return b_b(1 -c_b(_dc-1,2))end local function abc(_dc)return  _dc<0.5 and(1 -b_b(1 -c_b(2 *_dc,2)))/2 or(b_b(1 -c_b(-2 *_dc+2,2))+1)/2 end local function bbc(_dc)local adc=7.5625;local bdc=2.75 if(_dc<1 /bdc)then return adc*_dc*_dc elseif(_dc<2 /bdc)then local cdc=_dc- 1.5 /bdc;return adc*cdc*cdc+0.75 elseif(_dc<2.5 /bdc)then local cdc=_dc- 2.25 /bdc;return adc*cdc*cdc+0.9375 else local cdc=_dc-2.625 /bdc;return adc*cdc*cdc+0.984375 end end;local function cbc(_dc)return 1 -bbc(1 -_dc)end local function dbc(_dc)return _dc<0.5 and(1 - bbc(1 -2 *_dc))/2 or (1 +bbc(2 *_dc-1))/2 end local _cc={linear=_ab,lerp=d_b,flip=aab,easeIn=bab,easeInSine=abb,easeInBack=cbb,easeInCubic=dbb,easeInElastic=_cb,easeInExpo=acb,easeInQuad=ddb,easeInQuart=__c,easeInQuint=a_c,easeInCirc=dac,easeInBounce=cbc,easeOut=cab,easeOutSine=_bb,easeOutBack=b_c,easeOutCubic=c_c,easeOutElastic=d_c,easeOutExpo=_ac,easeOutQuad=aac,easeOutQuart=bac,easeOutQuint=cac,easeOutCirc=_bc,easeOutBounce=bbc,easeInOut=dab,easeInOutSine=bbb,easeInOutBack=bcb,easeInOutCubic=ccb,easeInOutElastic=dcb,easeInOutExpo=_db,easeInOutQuad=adb,easeInOutQuart=bdb,easeInOutQuint=cdb,easeInOutCirc=abc,easeInOutBounce=dbc}local acc=require("expect").expect;local bcc={}bcc.__index=bcc function bcc:new() local _dc={}setmetatable(_dc,bcc)_dc.duration=0;_dc.curTime=0 _dc.timeIncrement=0.05;_dc.ease="linear"_dc._animations={}_dc._animationCache={} _dc.onDoneHandler={}return _dc end function bcc.setEase(_dc,adc)acc(1,_dc,"table")acc(2,adc,"string")if(_cc[adc]==nil)then error( "Ease "..adc.." does not exist")end;_dc.ease=adc;return _dc end;function bcc.setIncrement(_dc,adc)acc(1,_dc,"table")acc(2,adc,"number") _dc.timeIncrement=math.max(adc,0.05)return _dc end;function bcc.on(_dc,adc) acc(1,_dc,"table")acc(2,adc,"number")adc=cda(adc*20)/20;_dc.duration=adc;return _dc end function bcc.run(_dc,adc) acc(1,_dc,"table")acc(2,adc,"function")local bdc=false;for cdc,ddc in pairs(_dc._animations)do if (ddc.time==_dc.duration)then table.insert(ddc.anims,adc)bdc=true;break end end;if(not bdc)then table.insert(_dc._animations,{time=_dc.duration,anims={adc}})end;return _dc end function bcc.wait(_dc,adc)acc(1,_dc,"table")acc(2,adc,"number") adc=cda(adc*20)/20;_dc.duration=_dc.duration+adc;return _dc end function bcc.update(_dc,adc)acc(1,_dc,"table")acc(2,adc,"number") if (adc==_dc.timerId)then _dc.curTime=_dc.curTime+_dc.timeIncrement if (_dc.curTime>=_dc.duration)then if(#_dc.onDoneHandler>0)then for bdc,cdc in pairs(_dc.onDoneHandler)do cdc()end end;_dc._animationCache={} os.cancelTimer(_dc.timerId)return end for bdc,cdc in pairs(_dc._animationCache)do if(cdc.time<=_dc.curTime)then for ddc,__d in pairs(cdc.anims)do __d(_dc)end table.remove(_dc._animationCache,bdc)end end;_dc.timerId=os.startTimer(_dc.timeIncrement)end end function bcc.play(_dc)acc(1,_dc,"table")_dc.curTime=0 _dc.timerId=os.startTimer(_dc.timeIncrement) for adc,bdc in pairs(_dc._animations)do _dc._animationCache[adc]={time=bdc.time,anims={}}for cdc,ddc in pairs(bdc.anims)do table.insert(_dc._animationCache[adc].anims,ddc)end end end function bcc.stop(_dc)acc(1,_dc,"table")os.cancelTimer(_dc.timerId)end;function bcc.onDone(_dc,adc)acc(1,_dc,"table")acc(2,adc,"function") table.insert(_dc.onDoneHandler,adc)return _dc end;local ccc={} local function dcc(_dc,adc,bdc,cdc,ddc,__d,a_d,b_d) local c_d=bcc:new()c_d:setEase(__d or"linear") if(ddc~=nil)then c_d:wait(ddc)end;local d_d,_ad=a_d(_dc) for i=0.05,cdc,0.05 do c_d:run(function(aad)local bad=_cc[aad.ease](i/cdc)local cad=math.floor( _cc.lerp(d_d,adc,bad)+0.5)local dad=math.floor( _cc.lerp(_ad,bdc,bad)+0.5) b_d(_dc,cad,dad)end):wait(0.05)end c_d:onDone(function()b_d(_dc,adc,bdc) for aad,bad in pairs(_dc.animations)do if(bad==posAnimation)then table.remove(_dc.animations,aad)break end end end):play()table.insert(_dc.animations,c_d)return c_d end function ccc:animatePosition(_dc,adc,bdc,cdc,ddc)acc(1,self,"table")acc(2,_dc,"number") acc(3,adc,"number")acc(4,bdc,"number","nil")acc(5,cdc,"number","nil") acc(6,ddc,"string","nil") return dcc(self,_dc,adc,bdc,cdc,ddc,self.getPosition,self.setPosition)end function ccc:animateSize(_dc,adc,bdc,cdc,ddc)acc(1,self,"table")acc(2,_dc,"number") acc(3,adc,"number")acc(4,bdc,"number","nil")acc(5,cdc,"number","nil") acc(6,ddc,"string","nil") return dcc(self,_dc,adc,bdc,cdc,ddc,self.getSize,self.setSize)end function ccc:animateOffset(_dc,adc,bdc,cdc,ddc)acc(1,self,"table")acc(2,_dc,"number") acc(3,adc,"number")acc(4,bdc,"number","nil")acc(5,cdc,"number","nil") acc(6,ddc,"string","nil")if(self.getOffset==nil or self.setOffset==nil)then error("Element ".. self:getType().." does not have offset!")end;return dcc(self,_dc,adc,bdc,cdc,ddc,self.getOffset,self.setOffset)end function ccc:newAnimation(_dc)acc(1,_dc,"table")return bcc:new()end function ccc.extensionProperties(_dc) local adc=require("basaltLoader").load("BasicElement")adc:initialize("VisualElement") adc:addProperty("animations","table",{})end function ccc.init(_dc)local adc=_dc.event _dc.event=function(bdc,cdc,ddc,...)if(cdc=="timer")then for __d,a_d in pairs(bdc.animations)do a_d:update(ddc)end end;if(adc)then return adc(bdc,cdc,ddc,...)end end end;return{VisualElement=ccc} end bundled_basaltContent["Modules/extensions/betterBackgrounds"] = function(...) local b={} function b.extensionProperties(c)c:initialize("VisualElement") c:addProperty("backgroundSymbol","char","") c:addProperty("backgroundSymbolColor","color",colors.red)end function b.init(c) c:extend("Init",function(d)local _a=d.render d.render=function(aa)_a(aa) local ba=aa:getBackgroundSymbol() if(ba~="")or(ba~=" ")then local ca,da=aa:getSize()ba=ba:sub(1,1)for i=1,da do aa:addText(1,i,ba:rep(ca))end end end;return d end)end;return{VisualElement=b} end bundled_basaltContent["Modules/extensions/borders"] = function(...) local d={}local _a=require("utils").tHex function d.extensionProperties(ba) ba:initialize("VisualElement")ba:addProperty("border","boolean",false) ba:addProperty("borderClickable","boolean",false) ba:addProperty("borderSides","table",{["top"]=true,["bottom"]=true,["left"]=true,["right"]=true})ba:addProperty("borderType","string","small") ba:addProperty("borderColor","color",colors.black)end;local aa=require("log") function d.init(ba) ba:extend("Init",function(ca)local da=ca.isInside;local _b=ca.render ca.isInside=function(ab,bb,cb) local db,_c=ab:getPosition()local ac=ab:getBorderSides() if(ab:getBorderClickable())then if (ab:getType()=="Button")then end if(ac["top"]and cb-_c==-1)then cb=cb+1 end if(ac["bottom"]and cb-_c==ab:getHeight())then cb=cb-1 end;if(ac["left"]and bb-db==-1)then bb=bb+1 end if(ac["right"]and bb-db==ab:getWidth())then bb=bb-1 end end;return da(ab,bb,cb)end ca.render=function(ab)_b(ab)local bb=ab:getBorder() if(bb)then local cb,db=ab:getSize() local _c=_a[ab:getBorderColor()]local ac=ab:getBorderSides() local bc=_a[ab:getBackground()]local cc=ab:getBorderType() if(cc=="solid")then for i=1,db do ab:addBlit(0,i," ",_c,_c,true)ab:addBlit(cb+1,i," ",_c,_c,true)end;local dc=(" "):rep(cb+2)local _d=_c:rep(cb+2)if(ac["top"])then ab:addBlit(0,0,dc,_d,_d,true)end;if(ac["bottom"])then ab:addBlit(0,db+1,dc,_d,_d,true)end elseif(cc=="small")then for i=1,db do if(ac["left"])then ab:addBlit(0,i,"\149",_c,bc,true)end;if(ac["right"])then ab:addBlit(cb+1,i,"\149",bc,_c,true)end end;local dc=_c:rep(cb+1)local _d=bc:rep(cb+1) if(ac["top"])then ab:addBlit(1,0,("\131"):rep(cb+ 1),dc,_d)end;if(ac["bottom"])then ab:addBlit(1,db+1,("\143"):rep(cb+1),_d,dc,true)end;if(ac["top"]and ac["left"])then ab:addBlit(0,0,"\151",_c,bc,true)end;if(ac["top"]and ac["right"])then ab:addBlit(cb+1,0,"\148",bc,_c,true)end if(ac["bottom"]and ac["left"])then ab:addBlit(0, db+1,"\138",bc,_c,true)end;if(ac["bottom"]and ac["right"])then ab:addBlit(cb+1,db+1,"\133",bc,_c,true)end end end end;return ca end)end;function d.setBorderSide(ba,ca,da) if(type(ca)=="table")then ba.borderSides=ca else ba.borderSides[ca]=da end;return ba end;function d.getBorderSide(ba,ca)return ba.borderSide[ca]end;return{VisualElement=d} end bundled_basaltContent["Modules/extensions/debug"] = function(...) local c={frames={}} local function d()local _a=c.basalt.getMainFrame() local aa=_a:getName() if(c.frames[aa]==nil)then c.frames[aa]={} c.frames[aa].window=_a:addMovableFrame():setSize(45,14):setBackground(colors.cyan):setZ(100):setVisible(false) c.frames[aa].window:addLabel():setText("Debug Log"):setPosition(1,1):setSize(45,1):setForeground(colors.cyan):setBackground(colors.black) c.frames[aa].debugLog=c.frames[aa].window:addList():setPosition(2,3):setSize(42,12):setBackground(colors.white):setForeground(colors.black):setSelectionColor(colors.white,colors.black) c.frames[aa].closeButton=c.frames[aa].window:addButton():setForeground(colors.black):setBackground(colors.red):setSize(1,1):setText("x"):setPosition("{parent.w}",1):onClick(function() c.frames[aa].window:setVisible(false)end) c.frames[aa].label=_a:addLabel():setBackground(colors.black):setForeground(colors.white):setVisible(false):onClick(function() c.frames[aa].window:setVisible( not c.frames[aa].window:getVisible())end)if(c.basalt.extensionExists("borders"))then c.frames[aa].window:setBorder(true)end end;return c.frames[aa]end c.debug=function(...)local _a="" for da,_b in pairs({...})do _a=_a..tostring(_b).." "end;local aa=c.basalt.getMainFrame()local ba=d()local ca=ba.label ca:setPosition(1,aa:getHeight()):setText( "[Debug]: ".._a):setVisible(true) if(ba.debugLog~=nil)then ba.debugLog:addItem(_a)end end c.openDebugPanel=function(_a)if(_a==nil)then _a=true end d():setVisible(_a==true and true or false)end;return{Basalt=c} end bundled_basaltContent["Modules/extensions/dynamicValues"] = function(...) local ca={clamp=true,round=true,math=true,colors=true} local function da(_c) if(ca[_c])then return _c end;if _c:sub(1,1):find('%a')and not _c:find('.',1,true)then return'"'.._c..'"'end;return _c end local function _b(_c)_c=_c:gsub("{","")_c=_c:gsub("}","") for ac,bc in pairs(colors)do if (type(ac)=="string")then _c=_c:gsub("%f[%w]"..ac.."%f[%W]","colors."..ac)end end _c=_c:gsub("(%s?)([%w.]+)",function(ac,bc)return ac..da(bc)end)_c=_c:gsub("%s?%?"," and ")_c=_c:gsub("%s?:"," or ") _c=_c:gsub("%.w%f[%W]",".width")_c=_c:gsub("%.h%f[%W]",".height")return _c end local function ab(_c,ac)ac.math=math;ac.colors=colors;ac.clamp=function(cc,dc,_d) return math.min(math.max(cc,dc),_d)end;ac.round=function(cc)return math.floor(cc+ 0.5)end;local bc=load( "return ".._c,"",nil,ac) if(bc==nil)then error(_c.. " - is not a valid dynamic value string")end;return bc()end local function bb(_c,ac,bc)local cc={}local dc={}bc=_b(bc)local _d=nil;local ad=true;local function bd()ad=true end for dd in bc:gmatch("%a+%.%a+")do local __a=dd:gsub("%.%a+","")local a_a=dd:gsub("%a+%.","")if (cc[__a]==nil)then cc[__a]={}end;table.insert(cc[__a],a_a)end for dd,__a in pairs(cc)do if(dd=="self")then for a_a,b_a in pairs(__a)do if(ac~=b_a)then _c:addPropertyObserver(b_a,bd) if(b_a=="clicked")or(b_a=="dragging")then _c:listenEvent("mouse_click")_c:listenEvent("mouse_up")end if(b_a=="dragging")then _c:listenEvent("mouse_drag")end if(b_a=="hovered")then _c:listenEvent("mouse_move")end;table.insert(dc,{ele=_c,name=b_a})else error("Dynamic Values - self reference to self")end end end;if(dd=="parent")then for a_a,b_a in pairs(__a)do _c.parent:addPropertyObserver(b_a,bd)table.insert(dc,{ele=_c.parent,name=b_a})end end if( dd~="self"and dd~="parent")and(ca[dd]==nil)then local a_a=_c:getParent():getChild(dd)for b_a,c_a in pairs(__a)do a_a:addPropertyObserver(c_a,bd) table.insert(dc,{ele=a_a,name=c_a})end end end local function cd()local dd={}local __a=_c:getParent() for a_a,b_a in pairs(cc)do local c_a={}if(a_a=="self")then for d_a,_aa in pairs(b_a)do c_a[_aa]=_c:getProperty(_aa)end end;if(a_a== "parent")then for d_a,_aa in pairs(b_a)do c_a[_aa]=__a:getProperty(_aa)end end if (a_a~="self")and(a_a~="parent")and(ca[a_a]==nil)then local d_a=__a:getChild(a_a)if (d_a==nil)then error("Dynamic Values - unable to find element: "..a_a)end;for _aa,aaa in pairs(b_a)do c_a[aaa]=d_a:getProperty(aaa)end end;dd[a_a]=c_a end;return ab(bc,dd)end return {get=function(dd)if(ad)then _d=cd()ad=false;_c:forcePropertyObserverUpdate(ac) _c:updateRender()end;return _d end,removeObservers=function(dd) for __a,a_a in pairs(dc)do a_a.ele:removePropertyObserver(a_a.name,bd)end end}end local function cb(_c,ac,bc)if(type(bc)=="string")and(bc:sub(1,1)=="{")and (bc:sub(-1)=="}")then _c.dynValues[ac]=bb(_c,ac,bc) bc=_c.dynValues[ac].get end;return bc end;local db={}function db.extensionProperties(_c)_c:initialize("BasicElement") _c:addProperty("dynValues","table",{})end function db.init(_c) local ac=_c.setProperty _c.setProperty=function(bc,cc,dc,_d)if(bc.dynValues==nil)then bc.dynValues={}end;if( bc.dynValues[cc]~=nil)then bc.dynValues[cc].removeObservers()end;bc.dynValues[cc]=nil dc=cb(bc,cc,dc)ac(bc,cc,dc,_d)end end;return{BasicElement=db} end bundled_basaltContent["Modules/extensions/shadows"] = function(...) local c={}local d=require("utils").tHex function c.extensionProperties(_a) _a:initialize("VisualElement")_a:addProperty("shadow","boolean",false) _a:addProperty("shadowDirection","string","bottomRight") _a:addProperty("shadowColor","color",colors.black)end function c.init(_a) _a:extend("Init",function(aa)local ba=aa.render aa.render=function(ca)ba(ca)local da=ca:getShadow() if(da)then local _b,ab=ca:getSize()local bb=d[ca:getShadowColor()] local cb=ca:getShadowDirection() if(cb=="bottomRight")then for i=1,ab do ca:addBlit(_b+1,i+1," ",bb,bb,true)end;for i=2,_b do ca:addBlit(i,ab+1," ",bb,bb,true)end end if(cb=="bottomLeft")then for i=1,ab do ca:addBlit(0,i+1," ",bb,bb,true)end;for i=1,_b do ca:addBlit(i,ab+1," ",bb,bb,true)end end if(cb=="topRight")then for i=0,ab-1 do ca:addBlit(_b+1,i," ",bb,bb,true)end;for i=2,_b do ca:addBlit(i,0," ",bb,bb,true)end end if(cb=="topLeft")then for i=0,ab-1 do ca:addBlit(0,i," ",bb,bb,true)end;for i=1,_b-1 do ca:addBlit(i,0," ",bb,bb,true)end end end end;return aa end)end;return{VisualElement=c} end bundled_basaltContent["Modules/extensions/templates"] = function(...) local ab=require("expect").expect;local function bb(ad)local bd={} for cd,dd in pairs(ad)do bd[cd]=dd end;return bd end local cb={default={background=colors.cyan,foreground=colors.black},BaseFrame={background=colors.white,foreground=colors.black,Button={background="{self.clicked ? black : cyan}",foreground="{self.clicked ? cyan : black}"},Container={background=colors.black,Button={background="{self.clicked ? black : cyan}",foreground="{self.clicked ? cyan : black}"}},Checkbox={background=colors.black,foreground=colors.cyan},Input={background="{self.focused ? cyan : black}",foreground="{self.focused ? black : cyan}",placeholderBackground="{self.focused ? cyan : black}",placeholderColor="{self.focused ? gray : gray}",placeholderText="{self.focused ? '' : 'Type..'}",width=14},Slider={background= nil,knobBackground="{self.focused ? cyan : black}"},Label={background=nil}}}local db={} function db.init(ad,bd)local cd=ad.setProperty ad.setProperty=function(dd,__a,a_a,b_a) if(dd._templateValues~=nil)then if (dd._templateValues[__a])then dd._templateValues[__a]=false end end;cd(dd,__a,a_a,b_a)end ad:extend("Init",function(dd)local __a=bd.getTemplate(dd)local a_a=bd.getElements()if( dd._templateValues==nil)then dd._templateValues={}end if(__a~=nil)then for b_a,c_a in pairs(__a)do if(a_a[b_a]==nil)then if(colors[c_a]~=nil)then dd:setProperty(b_a,colors[c_a])else dd:setProperty(b_a,c_a)end;dd._templateValues[b_a]=true end end end end)end function db.updateTemplate(ad)local bd=ad.basalt.getTemplate(ad) local cd=ad.basalt.getElements() if(bd~=nil)then for dd,__a in pairs(bd)do if(ad._templateValues[dd])then if(cd[dd]==nil)then if(colors[__a]~=nil)then ad:setProperty(dd,colors[__a])else ad:setProperty(dd,__a)end ad._templateValues[dd]=true end end end end end function db.__getElementPathTypes(ad,bd)if(bd~=nil)then table.insert(bd,1,ad.type)else bd={ad.type}end;local cd=ad:getParent()if(cd~=nil)then return cd:__getElementPathTypes(bd)else return bd end end local function _c(ad)local bd=bb(cb.default)local cd=cb if(cd~=nil)then for dd,__a in pairs(ad)do for a_a,b_a in pairs(__a)do if(cd[b_a]~=nil)then cd=cd[b_a]for c_a,d_a in pairs(cd)do bd[c_a]=d_a end;break else for c_a,d_a in pairs(cb.default)do bd[c_a]=d_a end end end end end;return bd end;local ac={}local bc;local cc={}local dc=basalt;function ac.init(ad)bc=ad.stop;dc=ad end;function ac.getTemplate(ad) ab(1,ad,"table","nil")if(ad==nil)then return cb end return _c(ad:__getElementPathTypes())end function ac.addTemplate(ad) ab(1,ad,"table") if(type(ad)=="table")then for cd,dd in pairs(ad)do cb[cd]=dd end end;local bd=dc.getFrames() for cd,dd in pairs(bd)do dd:updateTemplateColors()end end function ac.setTemplate(ad)ab(1,ad,"table")cb=ad;local bd=dc.getFrames()for cd,dd in pairs(bd)do dd:updateTemplateColors()end end function ac.loadTemplate(ad)ab(1,ad,"string")local bd=fs.open(ad,"r") if(bd~=nil)then local dd=bd.readAll()bd.close()cb=textutils.unserializeJSON(dd)else error( "Could not open template file "..ad)end;local cd=dc.getFrames() for dd,__a in pairs(cd)do __a:updateTemplateColors()end end function ac.setColors(ad)ab(1,ad,"table")for bd,cd in pairs(ad)do term.setPaletteColour(colors[bd],cd)end end;function ac.stop()bc() for ad,bd in pairs(cc)do for cd,dd in pairs(bd)do ad.setPaletteColor(colors[cd],dd)end end end;local _d={} function _d.init(ad,bd) ad:extend("Init",function(cd) if( ad:getParent()==nil)then if(cb.colors~=nil)then local dd=cd:getTerm() if(dd~=nil)then for __a,a_a in pairs(cb.colors)do if( colors[__a]~=nil)then if(a_a:sub(1,1)=="#")then a_a="0x"..a_a:sub(2)end;local b_a=tonumber(a_a)cc[dd]=cc[dd]or{} cc[dd][__a]=colors.packRGB(dd.getPaletteColor(colors[__a]))dd.setPaletteColor(colors[__a],b_a)end end end end end;return cd end)end function _d:updateTemplateColors()local ad=self:getChildren() self:updateTemplate()for bd,cd in pairs(ad)do if(cd.updateTemplate~=nil)then cd:updateTemplate()if (cd:isType("Container"))then cd:updateTemplateColors()end end end end;return{BasicElement=db,Container=_d,Basalt=ac} end bundled_basaltContent["Modules/extensions/xml"] = function(...) local ac,bc,cc=io,string,pairs;local dc=bc.byte('/',1)local _d=bc.byte('E',1) local function ad()return {quot='"',apos='\'',lt='<',gt='>',amp='&',tab='\t',nbsp=' '}end;local function bd(aaa,baa)return aaa:gsub('&([^;]+);',baa)end local function cd(aaa,baa)local caa=baa or ad()for daa,_ba in cc(aaa)do _ba.value=bd(_ba.value,caa) caa[_ba.name]=_ba.value end;return caa end local function dd(aaa,baa)aaa=aaa:gsub('<!%-%-(.-)%-%->','')local caa,daa={} if baa then local cba=aaa:find('<[_%w]') if cba then aaa:sub(1,cba):gsub('<!ENTITY%s+([_%w]+)%s+(.)(.-)%2',function(dba,_ca,aca) caa[#caa+1]={name=dba,value=aca}end)daa=cd(caa)aaa=bd(aaa:sub(cba),daa)end end;local _ba,aba={},{} local bba=function(cba)cba=cba:match'^%s*(.*%S)'or''if#cba~=0 then _ba[#_ba+1]={text=cba}end end aaa:gsub('<([?!/]?)([-:_%w]+)%s*(/?>?)([^<]*)',function(cba,dba,_ca,aca) if#cba==0 then local bca,cca={},{} if#_ca==0 then local dca=0 for _da,ada,bda,cda,dda in bc.gmatch(aca,"(.-([-_%w]+)%s*=%s*(.)(.-)%3%s*(/?>?))")do dca=dca+#_da;bca[ada]=cda;cca[#cca+1]={name=ada,value=cda}if# dda~=0 then aca=aca:sub(dca+1)_ca=dda;break end end end;_ba[#_ba+1]={tag=dba,attrs=bca,children={},orderedattrs=cca} if _ca:byte(1)~=dc then aba[#aba+1]=_ba;_ba=_ba[#_ba].children end;bba(aca)elseif'/'==cba then _ba=aba[#aba]aba[#aba]=nil;bba(aca)elseif'!'==cba then if _d== dba:byte(1)then aca:gsub('([_%w]+)%s+(.)(.-)%2',function(bca,cca,dca)caa[#caa+1]={name=bca,value=dca}end,1)end end end)return{children=_ba,entities=caa,tentities=daa}end local function __a(aaa,baa)local caa,daa=ac.open(aaa)if caa then local _ba=caa:read'*a'caa:close()return dd(_ba,baa),nil end;return caa,daa end local a_a={parse=dd,parseFile=__a,defaultEntityTable=ad,replaceEntities=bd,createEntityTable=cd}local b_a=require("expect").expect;local c_a={}local d_a={}function c_a.extensionProperties(aaa) aaa:initialize("VisualElement")end;function c_a.init(aaa) aaa:extend("Init",function(baa)end)end local function _aa(aaa)local baa={} for caa,daa in cc(aaa)do if(daa.tag)then if(daa.tag=="addItem")then if (daa.children[1].children)then table.insert(baa,_aa(daa.children[1].children))else table.insert(baa,daa.children[1].text)end else if(daa.children[1].children)then baa[daa.tag]=_aa(daa.children)else baa[daa.tag]=daa.children[1].text end end end end;return baa end function c_a.generateElementFromXML(aaa,baa,caa)caa=caa or _ENV;caa.basalt=aaa.basalt if(baa.attrs~=nil)then for daa,_ba in cc(baa.attrs)do if(aaa[daa]~=nil)then local aba="set"..daa:gsub("^%l",bc.upper)if(aaa[aba]~=nil)then aaa[aba](aaa,_ba)end end end end for daa,_ba in cc(baa.children)do if(_ba.tag)then if(aaa[_ba.tag]~=nil)then local aba="set".. _ba.tag:gsub("^%l",bc.upper) if(aaa[aba]~=nil)then if( aaa:getPropertyType(_ba.tag)=="table")then local bba=_aa(_ba.children) aaa[aba](aaa,bba)else aaa[aba](aaa,_ba.children[1].text)end elseif(aaa[_ba.tag]~=nil)then aaa[_ba.tag](aaa,function(...)caa.event=...or nil;caa.self=aaa load( "return ".._ba.children[1].text,nil,"t",caa)()end)else error("No property or event found for ".._ba.tag.." in (".. aaa:getType()..") "..aaa:getName())end end end end;return aaa end function c_a.loadXML(aaa,baa,caa)b_a(1,aaa,"table")b_a(2,baa,"string") b_a(3,caa,"table","nil")local daa=a_a.parse(baa) aaa:generateElementFromXML(daa,caa)return aaa end function c_a.loadXMLFile(aaa,baa,caa)b_a(1,aaa,"table")b_a(2,baa,"string") b_a(3,caa,"table","nil")local daa,_ba=a_a.parseFile(baa)if daa then aaa:generateElementFromXML(daa,caa)return aaa end;error(_ba)end function d_a.generateElementFromXML(aaa,baa,caa)caa=caa or _ENV;caa.basalt=aaa.basalt local daa=require("basaltLoader").load("BasicElement").generateElementFromXML for _ba,aba in cc(baa.children)do if(aba.tag)then local bba="add"..aba.tag:gsub("^%l",bc.upper)if(aaa[bba])then aaa[bba](aaa,aba.attrs.name or nil):generateElementFromXML(aba,caa)end end end;daa(aaa,baa)return aaa end;return{BasicElement=c_a,Container=d_a} end bundled_basaltContent["Modules/init"] = function(...) local _b={...}local ab=_b[1]or"basalt"local bb=package.path local cb="path;/path/?.lua;/path/?/init.lua;"local db=cb:gsub("path",ab) local _c=cb:gsub("path",ab.."/elements")local ac=cb:gsub("path",ab.."/extensions")local bc=cb:gsub("path",ab.. "/libraries")package.path=bb..db.._c.. ac..bc.."rom/?" local cc=require("main")package.path=bb;return cc end bundled_basaltContent["Modules/libraries/expect"] = function(...) local d={}local function _a(ba,ca)term.setTextColor(ca)print(ba) term.setTextColor(colors.white)end local function aa(ba,...)local ca={...}local da=false for _b,ab in ipairs(ca)do if( type(ab)=="table")then for bb,cb in ipairs(ab)do if ba==cb then da=true;break end end end if type(ba)==ab then da=true;break end if(ab=="color")then if(type(ba)=="string")then if(colors[ba])then da=true;break end elseif( type(ba)=="number")then for bb,cb in pairs(colors)do if(cb==ba)then da=true;break end end end end;if(ab=="dynValue")then if(type(ba)=="string")then if(ba:sub(1,1)=="{")and (ba:sub(-1)=="}")then da=true;break end end end end;if(type(ba)=="table")then if ba.isType then for _b,ab in ipairs(ca)do if ba:isType(ab)then da=true;break end end end end if not da then local _b=debug.traceback()local ab,bb,cb;local db={}for _c in _b:gmatch("[^\n]+")do db[#db+1]=_c end;if# db>=2 then local _c=db[#db-1] cb=_c:match("^.-:.-: in function '([^']+)'$")end if not cb then cb="Unknown function"end;ab,bb=_b:match("\n([^\n]+):(%d+): in main chunk$") if ab and bb then local _c=fs.open(ab,"r") if _c then local ac=""local bc=1 repeat ac=_c.readLine()if bc==tonumber(bb)then _a("\149Line "..bb,colors.cyan) _a(ac,colors.lightGray)break end;bc=bc+1 until not ac;_c.close()end else ab="Unknown location"bb="Unknown line"end;return ab,bb,cb,_b end;return true end function d.expect(ba,ca,...)if(ba==nil)then ba=1 end;if(ca==nil)then return end;local da={...} local _b,ab,bb,cb=aa(ca,...) if(_b~=true)then local db=_b:gsub("^%s+","")if(d.basalt~=nil)then d.basalt.stop()end _a("Basalt Initialization Error:",colors.red)print(cb)print() if(_b:sub(1,1)=="/")then db=_b:sub(2)end;term.setTextColor(colors.red) term.write("Error in ")term.setTextColor(colors.white) term.write(db:gsub("/",""))term.setTextColor(colors.red)term.write(":") term.setTextColor(colors.lightBlue)term.write(ab)term.setTextColor(colors.red) term.write(": ") _a("Invalid argument in function '"..bb.. ":"..ba.."'. Expected ".. table.concat(da,", ")..", got "..type(ca),colors.red)local _c=fs.open(_b:gsub("^%s+",""),"r") if _c then print() local ac=""local bc=1 repeat ac=_c.readLine() if bc==tonumber(ab)then _a("\149Line "..ab,colors.cyan)_a("  "..ac,colors.lightGray)break end;bc=bc+1 until not ac;_c.close()else error("Unable to open file ".._b:gsub("^%s+","")..".")end;return false end;return true end;function d.getExpectData(...)return aa(...)end;return d end bundled_basaltContent["Modules/libraries/log"] = function(...) local b={}b.__index=b;fs.delete("basaltLogs.txt") function b.new(c,d) local _a=setmetatable({},b)_a.filename=c or"basaltLogs.txt"_a.prefix=d or"Debug"return _a end;function b:setFile(c)self.filename=c end function b:setPrefix(c)self.prefix=c end function b:log(...)local c=io.open(self.filename,"a")if(c==nil)then error("Could not open file ".. self.filename.."!")end;local d={...}local _a=""for aa,ba in pairs(d)do _a=_a.. tostring(ba).." "end c:write("["..  os.date("%Y-%m-%d %H:%M:%S").."]["..self.prefix.."]: ".._a.."\n")c:close()end setmetatable(b,{__call=function(c,...)local d=b.new()d:log(...)end})return b end bundled_basaltContent["Modules/libraries/utils"] = function(...)  local da,_b,ab,bb,cb,db,_c=string.sub,string.find,string.reverse,string.rep,table.insert,string.len,math.floor;local ac={tHex={}} for i=0,15 do ac.tHex[2 ^i]=("%x"):format(i)end;function ac.split(bc,cc)local dc={} for _d in(bc..cc):gmatch("(.-)"..cc)do cb(dc,_d)end;return dc end;function ac.removeTags(bc)return bc:gsub("{[^}]+}","")end function ac.wrapText(bc,cc) bc=ac.removeTags(bc)local dc={}local _d=ac.split(bc,"\n") for ad,bd in pairs(_d)do if#bd==0 then table.insert(dc,"")else local cd=ac.split(bd," ")local dd=""for __a,a_a in ipairs(cd)do if#dd+#a_a>cc then table.insert(dc,dd)dd=a_a else if#dd>0 then dd=dd.." "end;dd=dd..a_a end end;if#dd>0 then table.insert(dc,dd)end end end;return dc end function ac.deepcopy(bc,cc)cc=cc or{}if bc==nil then return nil end if type(bc)~='table'then return bc end;if cc[bc]then return cc[bc]end;if bc.__noCopy then return bc end;local dc={} cc[bc]=dc;for _d,ad in pairs(bc)do dc[ac.deepcopy(_d,cc)]=ac.deepcopy(ad,cc)end setmetatable(dc,ac.deepcopy(getmetatable(bc),cc))return dc end function ac.getCenteredPosition(bc,cc,dc)local _d=string.len(bc) local ad=_c((cc-_d+1)/2 +0.5)local bd=_c(dc/2 +0.5)return ad,bd end function ac.subText(bc,cc,dc)if(cc+#bc<1)or(cc>dc)then return""end if cc<1 then if(cc==0)then bc=da(bc,2)else bc=da(bc,1 -cc)end;cc=1 end;if cc+#bc-1 >dc then bc=da(bc,1,dc-cc+1)end return bc,cc end function ac.orderedTable(bc)local cc={}for dc,_d in pairs(bc)do cc[#cc+1]=_d end;return cc end function ac.rpairs(bc)return function(cc,dc)dc=dc-1;if dc~=0 then return dc,cc[dc]end end,bc,#bc+1 end;function ac.tableCount(bc)local cc=0 if(bc~=nil)then for dc,_d in pairs(bc)do cc=cc+1 end end;return cc end function ac.uuid() return string.gsub(string.format('%x-%x-%x-%x-%x',math.random(0,0xffff),math.random(0,0xffff),math.random(0,0xffff), math.random(0,0x0fff)+0x4000,math.random(0,0x3fff)+0x8000),' ','0')end;return ac end bundled_basaltContent["Modules/main"] = function(...) local _ba={...}local aba=_ba[1]or".basalt"local bba=package.path local cba="path;/path/?.lua;/path/?/init.lua;"local dba=cba:gsub("path",aba) local _ca=cba:gsub("path",aba.."/elements")local aca=cba:gsub("path",aba.."/extensions")local bca=cba:gsub("path", aba.."/libraries") local cca=require("expect")local dca=cca.expect package.path=dba.._ca..aca..bca..bba;local _da=require("basaltLoader")local ada=require("utils") local bda=require("log") local cda={traceback=true,log=bda,extensionExists=_da.extensionExists}local dda={}local __b=false;local a_b,b_b,c_b,d_b=nil,nil,{},{}local _ab=term.current()local aab={} local bab,cab={},{}_da.setBasalt(cda)cca.basalt=cda local function dab()if(__b==false)then return end;if (a_b~=nil)then a_b:processRender()end;for dcb,_db in pairs(d_b)do _db:processRender()end end;local _bb={mouse_drag=0.05,mouse_move=0.05}local abb={}local bbb={} local cbb={mouse={mouse_click=true,mouse_up=true,mouse_drag=true,mouse_scroll=true,mouse_move=true,monitor_touch=true},keyboard={key=true,key_up=true,char=true}} local function dbb(dcb,...)local _db={...}if(dcb=="terminate")then cda.stop()end if (dcb=="mouse_move")then if(_db[1]==nil)or(_db[2]==nil)then return end end for adb,bdb in pairs(aab)do if(bdb==dcb)then if not bdb(dcb,unpack(_db))then return end end end if dcb=="timer"then for adb,bdb in pairs(abb)do if bdb==_db[1]then if a_b~=nil and a_b[adb]~=nil then a_b[adb](a_b,unpack(bbb[adb]))end;for cdb,ddb in pairs(d_b)do if ddb[adb]~=nil then ddb[adb](ddb,unpack(bbb[adb]))end end;abb[adb]= nil;bbb[adb]=nil;dab()return end end end if _bb[dcb]~=nil and _bb[dcb]>0 then if abb[dcb]==nil then abb[dcb]=os.startTimer(_bb[dcb])end;bbb[dcb]=_db;return else if(dcb=="key")then bab[_db[1]]=true end if(dcb=="key_up")then bab[_db[1]]=false end;if(dcb=="mouse_click")then cab[_db[1]]=true end if (dcb=="mouse_up")then cab[_db[1]]=false;if a_b~=nil and a_b.mouse_release~=nil then a_b.mouse_release(a_b,unpack(_db))end end if(cbb.mouse[dcb])then if(dcb=="monitor_touch")then for adb,bdb in pairs(d_b)do if bdb[dcb]~=nil then bdb[dcb](bdb,unpack(_db))end end else if a_b~=nil and a_b.event~=nil then a_b[dcb](a_b,unpack(_db))end end elseif(cbb.keyboard[dcb])then if b_b~=nil and b_b[dcb]~=nil then b_b[dcb](b_b,unpack(_db))end else for adb,bdb in pairs(c_b)do if(bdb.event~=nil)then bdb.event(bdb,dcb,unpack(_db))end end;for adb,bdb in pairs(d_b)do if bdb[dcb]~=nil then bdb[dcb](bdb,dcb,unpack(_db))end end end if(#dda>0)then for adb,bdb in pairs(dda)do if(coroutine.status(bdb.thread)=="dead")then table.remove(dda,adb)else if(bdb.filter~=nil)then if(dcb~=bdb.filter)then dab()return end bdb.filter=nil end local cdb,ddb=coroutine.resume(bdb.thread,dcb,...) if(cdb)then bdb.filter=ddb else cda.errorHandler(ddb)end end end end;dab()end end;local function _cb(dcb) for _db,adb in pairs(c_b)do if(adb:getId()==dcb)then return adb end end end local function acb(dcb)for _db,adb in pairs(d_b)do if (adb:getId()==dcb)then return adb end end end function cda.requiredElement(...)local dcb={...}dca(1,dcb[1],"string")local _db={}local adb=0 for bdb,cdb in pairs(dcb)do table.insert(_db,function()local ddb=adb;sleep(ddb)_da.require("element",cdb)end)adb=adb+0.1 end;parallel.waitForAll(unpack(_db))end function cda.requiredExtension(...)local dcb={...}dca(1,dcb[1],"string")local _db={}local adb=0 for bdb,cdb in pairs(dcb)do table.insert(_db,function()local ddb=adb;sleep(ddb)_da.require("extension",cdb)end)adb=adb+0.1 end;parallel.waitForAll(unpack(_db))end;function cda.getFrames()return c_b end;function cda.isKeyDown(dcb)dca(1,dcb,keys)return bab[dcb]or false end;function cda.isMouseDown(dcb) dca(1,dcb,{1,2,3,4})return cab[dcb]or false end;function cda.getMainFrame()if( a_b==nil)then a_b=cda.addFrame("mainFrame")end return a_b end function cda.addFrame(dcb) dca(1,dcb,"string","nil")if(a_b==nil)then dcb=dcb or"mainFrame"end dcb=dcb or ada.uuid() local _db=_da.load("BaseFrame"):new(dcb,nil,cda)_db:init()if(a_b==nil)then a_b=_db end table.insert(c_b,_db)return _db end function cda.removeFrame(dcb)dca(1,dcb,"string","BaseFrame")if (type(dcb)=="string")then dcb=_cb(id)end if(a_b==dcb)then a_b=nil;term.clear()end;for _db,adb in pairs(c_b)do if(adb==dcb)then table.remove(c_b,_db)return true end end;return false end function cda.switchFrame(dcb)dca(1,dcb,"string","BaseFrame")if (type(dcb)=="string")then dcb=_cb(dcb)end;a_b=dcb;dcb:forceRender() cda.setFocusedFrame(dcb)end function cda.addMonitor(dcb)dca(1,dcb,"string","Monitor") dcb=dcb or ada.uuid() local _db=_da.load("Monitor"):new(dcb,nil,cda)_db:init()table.insert(d_b,_db)return _db end function cda.removeMonitor(dcb)dca(1,dcb,"string","Monitor","BigMonitor")if( type(dcb)=="string")then dcb=acb(dcb)end;for _db,adb in pairs(d_b)do if(adb==dcb)then table.remove(d_b,_db)return end end end function cda.addBigMonitor(dcb)dca(1,dcb,"string","BigMonitor") dcb=dcb or ada.uuid() local _db=_da.load("BigMonitor"):new(dcb,nil,cda)_db:init()table.insert(d_b,_db)return _db end function cda.create(dcb,_db,adb,bdb)dca(1,dcb,"string")dca(2,_db,"nil","Container") dca(3,adb,"string")dca(4,bdb,"table","nil")local cdb=_da.load(adb) if (type(cdb)=="string")then cdb=load(cdb,nil,"t",_ENV)()end;local ddb=cdb:new(dcb,_db,cda) if(bdb~=nil)then for __c,a_c in pairs(bdb)do local b_c="set".. __c:sub(1,1):upper()..__c:sub(2) if( ddb[b_c]~=nil)then ddb[b_c](ddb,a_c)else ddb[__c]=a_c end end end;return ddb end;local function bcb(dcb,_db)term.setTextColor(_db)print(dcb) term.setTextColor(colors.white)end function cda.errorHandler(dcb)cda.stop() term.setBackgroundColor(colors.black)term.clear()term.setCursorPos(1,1) bcb("Basalt Runtime Error:",colors.red)print() local _db,adb,bdb=string.match(dcb,"(.-):(%d+):%s(.*)") if(cda.traceback)then local cdb=string.match(dcb,"stack traceback:(.*)") if cdb then bcb("Stack traceback:",colors.gray) for ddb in cdb:gmatch("[^\n]+")do local __c,a_c=ddb:match("([^:]+):(%d+):") if __c and a_c then term.setTextColor(colors.lightGray)term.write(__c)term.setTextColor(colors.gray) term.write(":")term.setTextColor(colors.lightBlue) term.write(a_c)term.setTextColor(colors.gray) ddb=ddb:gsub(__c..":"..a_c,"")end;bcb(ddb,colors.gray)end;print()end end if _db and adb then term.setTextColor(colors.red) term.write("Error in ")term.setTextColor(colors.white)term.write(_db) term.setTextColor(colors.red)term.write(":") term.setTextColor(colors.lightBlue)term.write(adb)term.setTextColor(colors.red) term.write(": ") if bdb then bdb=string.gsub(bdb,"stack traceback:.*","") if bdb~=""then bcb(bdb,colors.red)else bcb("Error message not available",colors.gray)end else bcb("Error message not available",colors.gray)end;local cdb=fs.open(_db,"r") if cdb then local ddb=""local __c=1 repeat ddb=cdb.readLine()if __c== tonumber(adb)then bcb("\149Line "..adb,colors.cyan) bcb(ddb,colors.lightGray)break end;__c=__c+1 until not ddb;cdb.close()end end;term.setBackgroundColor(colors.black)end function cda.run(dcb)dca(1,dcb,"boolean","nil")__b=dcb if(dcb==nil)then __b=true end local function _db()dab()while __b do dbb(os.pullEventRaw())end end;while __b do local adb,bdb=xpcall(_db,debug.traceback)if not(adb)then cda.errorHandler(bdb)end end end;cda.autoUpdate=cda.run function cda.getElements()return _da.getElementList()end function cda.onEvent(dcb,_db)dca(1,dcb,"string")dca(2,_db,"function")if (aab[dcb]==nil)then aab[dcb]={}end;table.insert(aab[dcb],_db)end function cda.removeEvent(dcb,_db)dca(dcb,"string")dca(_db,"function")if (aab[dcb]==nil)then return end;for adb,bdb in pairs(aab[dcb])do if(bdb==_db)then table.remove(aab[dcb],adb)end end end function cda.setFocusedFrame(dcb) dca(1,dcb,"BaseFrame","Monitor","BigMonitor")if(b_b~=nil)then b_b:lose_focus()end;if(dcb~=nil)then dcb:get_focus()end;b_b=dcb end function cda.thread(dcb,...)dca(1,dcb,"function")local _db={} _db.thread=coroutine.create(dcb)local adb,bdb=coroutine.resume(_db.thread,...) if(adb)then _db.stop=function() for cdb,ddb in pairs(dda)do if(ddb==_db)then table.remove(dda,cdb)end end;_db=nil end _db.status=function()return coroutine.status(_db.thread)end;_db.filter=bdb;table.insert(dda,_db)return _db end;cda.errorHandler(bdb)return _db end function cda.stop()_ab.clear()_ab.setCursorPos(1,1) _ab.setBackgroundColor(colors.black)_ab.setTextColor(colors.red) _ab.setTextColor(colors.white)__b=false end;function cda.getTerm()return _ab end local ccb=_da.getExtension("Basalt") if(ccb~=nil)then for dcb,_db in pairs(ccb)do _db.basalt=cda if(_db.init~=nil)then _db.init(cda)end for adb,bdb in pairs(_db)do if(adb~="init")then cda[adb]=bdb end end end end;package.path=bba;return cda end bundled_basaltContent["Modules/renderSystem"] = function(...) local _b=require("utils").tHex local ab,bb,cb,db,_c=string.sub,string.rep,math.max,math.min,table.unpack;local ac={}local bc=0 local function cc(dc,_d,ad)local bd=dc.._d..ad;if(bc>100)then ac={}bc=0 end;if not ac[bd]then ac[bd]=string.sub(dc,_d,ad)bc=bc+1 end;return ac[bd]end return function(dc)local _d=dc or term.current()local ad,bd=_d.getSize()local cd={} local dd={}local __a={}local a_a;local b_a={}local c_a=false local function d_a()a_a=bb(" ",ad)for n=0,15 do local daa=2 ^n;local _ba=_b[daa] b_a[daa]=bb(_ba,ad)end end;d_a() local function _aa()d_a()local daa=a_a;local _ba=b_a[colors.white] local aba=b_a[colors.black] for currentY=1,bd do dd[currentY]=dd[currentY]or{} cd[currentY]=cd[currentY]or{} dd[currentY][1]=ab(dd[currentY][1]==nil and daa or  dd[currentY][1]..daa:sub(1,ad-dd[currentY][1]:len()),1,ad) dd[currentY][2]=ab(dd[currentY][2]==nil and _ba or  dd[currentY][2].._ba:sub(1,ad-dd[currentY][2]:len()),1,ad) dd[currentY][3]=ab(dd[currentY][3]==nil and aba or  dd[currentY][3]..aba:sub(1,ad-dd[currentY][3]:len()),1,ad)__a[currentY]=true end end;_aa() local function aaa(daa,_ba,aba,bba,cba,dba,_ca) aba=cc(aba,cb(1 -dba+1,1),cb(_ca-dba+1,1)) bba=cc(bba,cb(1 -dba+1,1),cb(_ca-dba+1,1)) cba=cc(cba,cb(1 -dba+1,1),cb(_ca-dba+1,1)) if#aba==#bba and#aba==#cba then if _ba>=1 and _ba<=bd then if daa+#aba>0 and daa<=ad then local aca=daa<1 and 1 -daa+1 or 1;local bca= daa+#aba>ad and ad-daa+1 or#aba local cca=dd[_ba]local dca=cc(cca[1],1,daa-1)..cc(aba,aca,bca)local _da=cc(cca[2],1, daa-1)..cc(bba,aca,bca)local ada=cc(cca[3],1,daa- 1)..cc(cba,aca,bca) if daa+#aba<=ad then dca=dca..cc(cca[1],daa+#aba,ad)_da=_da..cc(cca[2], daa+#aba,ad)ada=ada.. cc(cca[3],daa+#aba,ad)end if(dd[_ba][1]~=dca or dd[_ba][2]~=_da or dd[_ba][3]~=ada)then dd[_ba][1]=dca;dd[_ba][2]=_da dd[_ba][3]=ada;__a[_ba]=true end end end end end local function baa(daa,_ba,aba,bba) if aba>=1 and aba<=bd and _ba+#bba>0 and _ba<=ad then local cba=cb(1,1 -_ba+1)local dba=db(#bba,ad-_ba+1) local _ca=dd[aba][daa]local aca=cc(_ca,1,_ba-1)..cc(bba,cba,dba) if _ba+#bba<=ad then aca=aca..cc(_ca,_ba+#bba,ad)end if(dd[aba][daa]~=aca)then dd[aba][daa]=aca;__a[aba]=true end end end local caa={setSize=function(daa,_ba)ad,bd=daa,_ba;_aa()end,setBg=function(daa,_ba,aba)baa(3,daa,_ba,aba)end,setText=function(daa,_ba,aba) baa(1,daa,_ba,aba)end,setFg=function(daa,_ba,aba)baa(2,daa,_ba,aba)end,blit=function(daa,_ba,aba,bba,cba,dba,_ca) aaa(daa,_ba,aba,bba,cba,dba,_ca)end,drawBackgroundBox=function(daa,_ba,aba,bba,cba)local dba=bb(type(cba)=="string"and cba or _b[cba],aba) if( type(cba)=="string")and(#cba>1)then dba=ab(dba,1,aba)end;for n=1,bba do baa(3,daa,_ba+ (n-1),dba)end end,drawForegroundBox=function(daa,_ba,aba,bba,cba) local dba=bb( type(cba)=="string"and cba or _b[cba],aba) if(type(cba)=="string")and(#cba>1)then dba=ab(dba,1,aba)end;for n=1,bba do baa(2,daa,_ba+ (n-1),dba)end end,drawTextBox=function(daa,_ba,aba,bba,cba) local dba=bb(cba,aba)if(#cba>1)then dba=ab(dba,1,aba)end;for n=1,bba do baa(1,daa,_ba+ (n-1),dba)end end,update=function() local daa,_ba=_d.getCursorPos()local aba=false if(_d.getCursorBlink~=nil)then aba=_d.getCursorBlink()end;_d.setCursorBlink(false) for n=1,bd do if(c_a)then cd[n][1]=dd[n][1] cd[n][2]=dd[n][2]cd[n][3]=dd[n][3]_d.setCursorPos(1,n) _d.blit(_c(dd[n]))__a[n]=false else if(__a[n])then if ( (cd[n][1]~=dd[n][1])or(cd[n][2]~=dd[n][2])or(cd[n][3]~=dd[n][3]))or(c_a)then cd[n][1]=dd[n][1]cd[n][2]=dd[n][2] cd[n][3]=dd[n][3]_d.setCursorPos(1,n)_d.blit(_c(dd[n]))end;__a[n]=false end end end;c_a=false;_d.setBackgroundColor(colors.black) _d.setCursorBlink(aba)_d.setCursorPos(daa,_ba)end,forceRender=function() c_a=true end,setTerm=function(daa)_d=daa end}return caa end end bundled_availableFiles["Modules/extensions"] = {"animations.lua","betterBackgrounds.lua","borders.lua","debug.lua","dynamicValues.lua","shadows.lua","templates.lua","xml.lua",} bundled_availableFiles["Modules/elements"] = {"BaseFrame.lua","BasicElement.lua","BigMonitor.lua","Button.lua","Checkbox.lua","Container.lua","Dropdown.lua","Frame.lua","Image.lua","Input.lua","Label.lua","List.lua","Menubar.lua","Monitor.lua","MovableFrame.lua","Program.lua","Progressbar.lua","ScrollableFrame.lua","Slider.lua","Textfield.lua","VisualElement.lua",} bundled_availableFiles["Modules"] = {"basaltLoader.lua","init.lua","main.lua","renderSystem.lua",} bundled_availableFiles["Modules/libraries"] = {"expect.lua","log.lua","utils.lua",} return bundled_basaltContent['basalt/main']()