local _ba={...}local aba=_ba[1]or".basalt"local bba=package.path local cba="path;/path/?.lua;/path/?/init.lua;"local dba=cba:gsub("path",aba) local _ca=cba:gsub("path",aba.."/elements")local aca=cba:gsub("path",aba.."/extensions")local bca=cba:gsub("path", aba.."/libraries") local cca=require("expect")local dca=cca.expect package.path=dba.._ca..aca..bca..bba;local _da=require("basaltLoader")local ada=require("utils") local bda=require("log") local cda={traceback=true,log=bda,extensionExists=_da.extensionExists}local dda={}local __b=false;local a_b,b_b,c_b,d_b=nil,nil,{},{}local _ab=term.current()local aab={} local bab,cab={},{}_da.setBasalt(cda)cca.basalt=cda local function dab()if(__b==false)then return end;if (a_b~=nil)then a_b:processRender()end;for dcb,_db in pairs(d_b)do _db:processRender()end end;local _bb={mouse_drag=0.05,mouse_move=0.05}local abb={}local bbb={} local cbb={mouse={mouse_click=true,mouse_up=true,mouse_drag=true,mouse_scroll=true,mouse_move=true,monitor_touch=true},keyboard={key=true,key_up=true,char=true}} local function dbb(dcb,...)local _db={...}if(dcb=="terminate")then cda.stop()end if (dcb=="mouse_move")then if(_db[1]==nil)or(_db[2]==nil)then return end end for adb,bdb in pairs(aab)do if(bdb==dcb)then if not bdb(dcb,unpack(_db))then return end end end if dcb=="timer"then for adb,bdb in pairs(abb)do if bdb==_db[1]then if a_b~=nil and a_b[adb]~=nil then a_b[adb](a_b,unpack(bbb[adb]))end;for cdb,ddb in pairs(d_b)do if ddb[adb]~=nil then ddb[adb](ddb,unpack(bbb[adb]))end end;abb[adb]= nil;bbb[adb]=nil;dab()return end end end if _bb[dcb]~=nil and _bb[dcb]>0 then if abb[dcb]==nil then abb[dcb]=os.startTimer(_bb[dcb])end;bbb[dcb]=_db;return else if(dcb=="key")then bab[_db[1]]=true end if(dcb=="key_up")then bab[_db[1]]=false end;if(dcb=="mouse_click")then cab[_db[1]]=true end if (dcb=="mouse_up")then cab[_db[1]]=false;if a_b~=nil and a_b.mouse_release~=nil then a_b.mouse_release(a_b,unpack(_db))end end if(cbb.mouse[dcb])then if(dcb=="monitor_touch")then for adb,bdb in pairs(d_b)do if bdb[dcb]~=nil then bdb[dcb](bdb,unpack(_db))end end else if a_b~=nil and a_b.event~=nil then a_b[dcb](a_b,unpack(_db))end end elseif(cbb.keyboard[dcb])then if b_b~=nil and b_b[dcb]~=nil then b_b[dcb](b_b,unpack(_db))end else for adb,bdb in pairs(c_b)do if(bdb.event~=nil)then bdb.event(bdb,dcb,unpack(_db))end end;for adb,bdb in pairs(d_b)do if bdb[dcb]~=nil then bdb[dcb](bdb,dcb,unpack(_db))end end end if(#dda>0)then for adb,bdb in pairs(dda)do if(coroutine.status(bdb.thread)=="dead")then table.remove(dda,adb)else if(bdb.filter~=nil)then if(dcb~=bdb.filter)then dab()return end bdb.filter=nil end local cdb,ddb=coroutine.resume(bdb.thread,dcb,...) if(cdb)then bdb.filter=ddb else cda.errorHandler(ddb)end end end end;dab()end end;local function _cb(dcb) for _db,adb in pairs(c_b)do if(adb:getId()==dcb)then return adb end end end local function acb(dcb)for _db,adb in pairs(d_b)do if (adb:getId()==dcb)then return adb end end end function cda.requiredElement(...)local dcb={...}dca(1,dcb[1],"string")local _db={}local adb=0 for bdb,cdb in pairs(dcb)do table.insert(_db,function()local ddb=adb;sleep(ddb)_da.require("element",cdb)end)adb=adb+0.1 end;parallel.waitForAll(unpack(_db))end function cda.requiredExtension(...)local dcb={...}dca(1,dcb[1],"string")local _db={}local adb=0 for bdb,cdb in pairs(dcb)do table.insert(_db,function()local ddb=adb;sleep(ddb)_da.require("extension",cdb)end)adb=adb+0.1 end;parallel.waitForAll(unpack(_db))end;function cda.getFrames()return c_b end;function cda.isKeyDown(dcb)dca(1,dcb,keys)return bab[dcb]or false end;function cda.isMouseDown(dcb) dca(1,dcb,{1,2,3,4})return cab[dcb]or false end;function cda.getMainFrame()if( a_b==nil)then a_b=cda.addFrame("mainFrame")end return a_b end function cda.addFrame(dcb) dca(1,dcb,"string","nil")if(a_b==nil)then dcb=dcb or"mainFrame"end dcb=dcb or ada.uuid() local _db=_da.load("BaseFrame"):new(dcb,nil,cda)_db:init()if(a_b==nil)then a_b=_db end table.insert(c_b,_db)return _db end function cda.removeFrame(dcb)dca(1,dcb,"string","BaseFrame")if (type(dcb)=="string")then dcb=_cb(id)end if(a_b==dcb)then a_b=nil;term.clear()end;for _db,adb in pairs(c_b)do if(adb==dcb)then table.remove(c_b,_db)return true end end;return false end function cda.switchFrame(dcb)dca(1,dcb,"string","BaseFrame")if (type(dcb)=="string")then dcb=_cb(dcb)end;a_b=dcb;dcb:forceRender() cda.setFocusedFrame(dcb)end function cda.addMonitor(dcb)dca(1,dcb,"string","Monitor") dcb=dcb or ada.uuid() local _db=_da.load("Monitor"):new(dcb,nil,cda)_db:init()table.insert(d_b,_db)return _db end function cda.removeMonitor(dcb)dca(1,dcb,"string","Monitor","BigMonitor")if( type(dcb)=="string")then dcb=acb(dcb)end;for _db,adb in pairs(d_b)do if(adb==dcb)then table.remove(d_b,_db)return end end end function cda.addBigMonitor(dcb)dca(1,dcb,"string","BigMonitor") dcb=dcb or ada.uuid() local _db=_da.load("BigMonitor"):new(dcb,nil,cda)_db:init()table.insert(d_b,_db)return _db end function cda.create(dcb,_db,adb,bdb)dca(1,dcb,"string")dca(2,_db,"nil","Container") dca(3,adb,"string")dca(4,bdb,"table","nil")local cdb=_da.load(adb) if (type(cdb)=="string")then cdb=load(cdb,nil,"t",_ENV)()end;local ddb=cdb:new(dcb,_db,cda) if(bdb~=nil)then for __c,a_c in pairs(bdb)do local b_c="set".. __c:sub(1,1):upper()..__c:sub(2) if( ddb[b_c]~=nil)then ddb[b_c](ddb,a_c)else ddb[__c]=a_c end end end;return ddb end;local function bcb(dcb,_db)term.setTextColor(_db)print(dcb) term.setTextColor(colors.white)end function cda.errorHandler(dcb)cda.stop() term.setBackgroundColor(colors.black)term.clear()term.setCursorPos(1,1) bcb("Basalt Runtime Error:",colors.red)print() local _db,adb,bdb=string.match(dcb,"(.-):(%d+):%s(.*)") if(cda.traceback)then local cdb=string.match(dcb,"stack traceback:(.*)") if cdb then bcb("Stack traceback:",colors.gray) for ddb in cdb:gmatch("[^\n]+")do local __c,a_c=ddb:match("([^:]+):(%d+):") if __c and a_c then term.setTextColor(colors.lightGray)term.write(__c)term.setTextColor(colors.gray) term.write(":")term.setTextColor(colors.lightBlue) term.write(a_c)term.setTextColor(colors.gray) ddb=ddb:gsub(__c..":"..a_c,"")end;bcb(ddb,colors.gray)end;print()end end if _db and adb then term.setTextColor(colors.red) term.write("Error in ")term.setTextColor(colors.white)term.write(_db) term.setTextColor(colors.red)term.write(":") term.setTextColor(colors.lightBlue)term.write(adb)term.setTextColor(colors.red) term.write(": ") if bdb then bdb=string.gsub(bdb,"stack traceback:.*","") if bdb~=""then bcb(bdb,colors.red)else bcb("Error message not available",colors.gray)end else bcb("Error message not available",colors.gray)end;local cdb=fs.open(_db,"r") if cdb then local ddb=""local __c=1 repeat ddb=cdb.readLine()if __c== tonumber(adb)then bcb("\149Line "..adb,colors.cyan) bcb(ddb,colors.lightGray)break end;__c=__c+1 until not ddb;cdb.close()end end;term.setBackgroundColor(colors.black)end function cda.run(dcb)dca(1,dcb,"boolean","nil")__b=dcb if(dcb==nil)then __b=true end local function _db()dab()while __b do dbb(os.pullEventRaw())end end;while __b do local adb,bdb=xpcall(_db,debug.traceback)if not(adb)then cda.errorHandler(bdb)end end end;cda.autoUpdate=cda.run function cda.getElements()return _da.getElementList()end function cda.onEvent(dcb,_db)dca(1,dcb,"string")dca(2,_db,"function")if (aab[dcb]==nil)then aab[dcb]={}end;table.insert(aab[dcb],_db)end function cda.removeEvent(dcb,_db)dca(dcb,"string")dca(_db,"function")if (aab[dcb]==nil)then return end;for adb,bdb in pairs(aab[dcb])do if(bdb==_db)then table.remove(aab[dcb],adb)end end end function cda.setFocusedFrame(dcb) dca(1,dcb,"BaseFrame","Monitor","BigMonitor")if(b_b~=nil)then b_b:lose_focus()end;if(dcb~=nil)then dcb:get_focus()end;b_b=dcb end function cda.thread(dcb,...)dca(1,dcb,"function")local _db={} _db.thread=coroutine.create(dcb)local adb,bdb=coroutine.resume(_db.thread,...) if(adb)then _db.stop=function() for cdb,ddb in pairs(dda)do if(ddb==_db)then table.remove(dda,cdb)end end;_db=nil end _db.status=function()return coroutine.status(_db.thread)end;_db.filter=bdb;table.insert(dda,_db)return _db end;cda.errorHandler(bdb)return _db end function cda.stop()_ab.clear()_ab.setCursorPos(1,1) _ab.setBackgroundColor(colors.black)_ab.setTextColor(colors.red) _ab.setTextColor(colors.white)__b=false end;function cda.getTerm()return _ab end local ccb=_da.getExtension("Basalt") if(ccb~=nil)then for dcb,_db in pairs(ccb)do _db.basalt=cda if(_db.init~=nil)then _db.init(cda)end for adb,bdb in pairs(_db)do if(adb~="init")then cda[adb]=bdb end end end end;package.path=bba;return cda