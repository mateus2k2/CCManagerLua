local ca={clamp=true,round=true,math=true,colors=true} local function da(_c) if(ca[_c])then return _c end;if _c:sub(1,1):find('%a')and not _c:find('.',1,true)then return'"'.._c..'"'end;return _c end local function _b(_c)_c=_c:gsub("{","")_c=_c:gsub("}","") for ac,bc in pairs(colors)do if (type(ac)=="string")then _c=_c:gsub("%f[%w]"..ac.."%f[%W]","colors."..ac)end end _c=_c:gsub("(%s?)([%w.]+)",function(ac,bc)return ac..da(bc)end)_c=_c:gsub("%s?%?"," and ")_c=_c:gsub("%s?:"," or ") _c=_c:gsub("%.w%f[%W]",".width")_c=_c:gsub("%.h%f[%W]",".height")return _c end local function ab(_c,ac)ac.math=math;ac.colors=colors;ac.clamp=function(cc,dc,_d) return math.min(math.max(cc,dc),_d)end;ac.round=function(cc)return math.floor(cc+ 0.5)end;local bc=load( "return ".._c,"",nil,ac) if(bc==nil)then error(_c.. " - is not a valid dynamic value string")end;return bc()end local function bb(_c,ac,bc)local cc={}local dc={}bc=_b(bc)local _d=nil;local ad=true;local function bd()ad=true end for dd in bc:gmatch("%a+%.%a+")do local __a=dd:gsub("%.%a+","")local a_a=dd:gsub("%a+%.","")if (cc[__a]==nil)then cc[__a]={}end;table.insert(cc[__a],a_a)end for dd,__a in pairs(cc)do if(dd=="self")then for a_a,b_a in pairs(__a)do if(ac~=b_a)then _c:addPropertyObserver(b_a,bd) if(b_a=="clicked")or(b_a=="dragging")then _c:listenEvent("mouse_click")_c:listenEvent("mouse_up")end if(b_a=="dragging")then _c:listenEvent("mouse_drag")end if(b_a=="hovered")then _c:listenEvent("mouse_move")end;table.insert(dc,{ele=_c,name=b_a})else error("Dynamic Values - self reference to self")end end end;if(dd=="parent")then for a_a,b_a in pairs(__a)do _c.parent:addPropertyObserver(b_a,bd)table.insert(dc,{ele=_c.parent,name=b_a})end end if( dd~="self"and dd~="parent")and(ca[dd]==nil)then local a_a=_c:getParent():getChild(dd)for b_a,c_a in pairs(__a)do a_a:addPropertyObserver(c_a,bd) table.insert(dc,{ele=a_a,name=c_a})end end end local function cd()local dd={}local __a=_c:getParent() for a_a,b_a in pairs(cc)do local c_a={}if(a_a=="self")then for d_a,_aa in pairs(b_a)do c_a[_aa]=_c:getProperty(_aa)end end;if(a_a== "parent")then for d_a,_aa in pairs(b_a)do c_a[_aa]=__a:getProperty(_aa)end end if (a_a~="self")and(a_a~="parent")and(ca[a_a]==nil)then local d_a=__a:getChild(a_a)if (d_a==nil)then error("Dynamic Values - unable to find element: "..a_a)end;for _aa,aaa in pairs(b_a)do c_a[aaa]=d_a:getProperty(aaa)end end;dd[a_a]=c_a end;return ab(bc,dd)end return {get=function(dd)if(ad)then _d=cd()ad=false;_c:forcePropertyObserverUpdate(ac) _c:updateRender()end;return _d end,removeObservers=function(dd) for __a,a_a in pairs(dc)do a_a.ele:removePropertyObserver(a_a.name,bd)end end}end local function cb(_c,ac,bc)if(type(bc)=="string")and(bc:sub(1,1)=="{")and (bc:sub(-1)=="}")then _c.dynValues[ac]=bb(_c,ac,bc) bc=_c.dynValues[ac].get end;return bc end;local db={}function db.extensionProperties(_c)_c:initialize("BasicElement") _c:addProperty("dynValues","table",{})end function db.init(_c) local ac=_c.setProperty _c.setProperty=function(bc,cc,dc,_d)if(bc.dynValues==nil)then bc.dynValues={}end;if( bc.dynValues[cc]~=nil)then bc.dynValues[cc].removeObservers()end;bc.dynValues[cc]=nil dc=cb(bc,cc,dc)ac(bc,cc,dc,_d)end end;return{BasicElement=db}