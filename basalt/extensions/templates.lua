local ab=require("expect").expect;local function bb(ad)local bd={} for cd,dd in pairs(ad)do bd[cd]=dd end;return bd end local cb={default={background=colors.cyan,foreground=colors.black},BaseFrame={background=colors.white,foreground=colors.black,Button={background="{self.clicked ? black : cyan}",foreground="{self.clicked ? cyan : black}"},Container={background=colors.black,Button={background="{self.clicked ? black : cyan}",foreground="{self.clicked ? cyan : black}"}},Checkbox={background=colors.black,foreground=colors.cyan},Input={background="{self.focused ? cyan : black}",foreground="{self.focused ? black : cyan}",placeholderBackground="{self.focused ? cyan : black}",placeholderColor="{self.focused ? gray : gray}",placeholderText="{self.focused ? '' : 'Type..'}",width=14},Slider={background= nil,knobBackground="{self.focused ? cyan : black}"},Label={background=nil}}}local db={} function db.init(ad,bd)local cd=ad.setProperty ad.setProperty=function(dd,__a,a_a,b_a) if(dd._templateValues~=nil)then if (dd._templateValues[__a])then dd._templateValues[__a]=false end end;cd(dd,__a,a_a,b_a)end ad:extend("Init",function(dd)local __a=bd.getTemplate(dd)local a_a=bd.getElements()if( dd._templateValues==nil)then dd._templateValues={}end if(__a~=nil)then for b_a,c_a in pairs(__a)do if(a_a[b_a]==nil)then if(colors[c_a]~=nil)then dd:setProperty(b_a,colors[c_a])else dd:setProperty(b_a,c_a)end;dd._templateValues[b_a]=true end end end end)end function db.updateTemplate(ad)local bd=ad.basalt.getTemplate(ad) local cd=ad.basalt.getElements() if(bd~=nil)then for dd,__a in pairs(bd)do if(ad._templateValues[dd])then if(cd[dd]==nil)then if(colors[__a]~=nil)then ad:setProperty(dd,colors[__a])else ad:setProperty(dd,__a)end ad._templateValues[dd]=true end end end end end function db.__getElementPathTypes(ad,bd)if(bd~=nil)then table.insert(bd,1,ad.type)else bd={ad.type}end;local cd=ad:getParent()if(cd~=nil)then return cd:__getElementPathTypes(bd)else return bd end end local function _c(ad)local bd=bb(cb.default)local cd=cb if(cd~=nil)then for dd,__a in pairs(ad)do for a_a,b_a in pairs(__a)do if(cd[b_a]~=nil)then cd=cd[b_a]for c_a,d_a in pairs(cd)do bd[c_a]=d_a end;break else for c_a,d_a in pairs(cb.default)do bd[c_a]=d_a end end end end end;return bd end;local ac={}local bc;local cc={}local dc=basalt;function ac.init(ad)bc=ad.stop;dc=ad end;function ac.getTemplate(ad) ab(1,ad,"table","nil")if(ad==nil)then return cb end return _c(ad:__getElementPathTypes())end function ac.addTemplate(ad) ab(1,ad,"table") if(type(ad)=="table")then for cd,dd in pairs(ad)do cb[cd]=dd end end;local bd=dc.getFrames() for cd,dd in pairs(bd)do dd:updateTemplateColors()end end function ac.setTemplate(ad)ab(1,ad,"table")cb=ad;local bd=dc.getFrames()for cd,dd in pairs(bd)do dd:updateTemplateColors()end end function ac.loadTemplate(ad)ab(1,ad,"string")local bd=fs.open(ad,"r") if(bd~=nil)then local dd=bd.readAll()bd.close()cb=textutils.unserializeJSON(dd)else error( "Could not open template file "..ad)end;local cd=dc.getFrames() for dd,__a in pairs(cd)do __a:updateTemplateColors()end end function ac.setColors(ad)ab(1,ad,"table")for bd,cd in pairs(ad)do term.setPaletteColour(colors[bd],cd)end end;function ac.stop()bc() for ad,bd in pairs(cc)do for cd,dd in pairs(bd)do ad.setPaletteColor(colors[cd],dd)end end end;local _d={} function _d.init(ad,bd) ad:extend("Init",function(cd) if( ad:getParent()==nil)then if(cb.colors~=nil)then local dd=cd:getTerm() if(dd~=nil)then for __a,a_a in pairs(cb.colors)do if( colors[__a]~=nil)then if(a_a:sub(1,1)=="#")then a_a="0x"..a_a:sub(2)end;local b_a=tonumber(a_a)cc[dd]=cc[dd]or{} cc[dd][__a]=colors.packRGB(dd.getPaletteColor(colors[__a]))dd.setPaletteColor(colors[__a],b_a)end end end end end;return cd end)end function _d:updateTemplateColors()local ad=self:getChildren() self:updateTemplate()for bd,cd in pairs(ad)do if(cd.updateTemplate~=nil)then cd:updateTemplate()if (cd:isType("Container"))then cd:updateTemplateColors()end end end end;return{BasicElement=db,Container=_d,Basalt=ac}