local ac,bc,cc=io,string,pairs;local dc=bc.byte('/',1)local _d=bc.byte('E',1) local function ad()return {quot='"',apos='\'',lt='<',gt='>',amp='&',tab='\t',nbsp=' '}end;local function bd(aaa,baa)return aaa:gsub('&([^;]+);',baa)end local function cd(aaa,baa)local caa=baa or ad()for daa,_ba in cc(aaa)do _ba.value=bd(_ba.value,caa) caa[_ba.name]=_ba.value end;return caa end local function dd(aaa,baa)aaa=aaa:gsub('<!%-%-(.-)%-%->','')local caa,daa={} if baa then local cba=aaa:find('<[_%w]') if cba then aaa:sub(1,cba):gsub('<!ENTITY%s+([_%w]+)%s+(.)(.-)%2',function(dba,_ca,aca) caa[#caa+1]={name=dba,value=aca}end)daa=cd(caa)aaa=bd(aaa:sub(cba),daa)end end;local _ba,aba={},{} local bba=function(cba)cba=cba:match'^%s*(.*%S)'or''if#cba~=0 then _ba[#_ba+1]={text=cba}end end aaa:gsub('<([?!/]?)([-:_%w]+)%s*(/?>?)([^<]*)',function(cba,dba,_ca,aca) if#cba==0 then local bca,cca={},{} if#_ca==0 then local dca=0 for _da,ada,bda,cda,dda in bc.gmatch(aca,"(.-([-_%w]+)%s*=%s*(.)(.-)%3%s*(/?>?))")do dca=dca+#_da;bca[ada]=cda;cca[#cca+1]={name=ada,value=cda}if# dda~=0 then aca=aca:sub(dca+1)_ca=dda;break end end end;_ba[#_ba+1]={tag=dba,attrs=bca,children={},orderedattrs=cca} if _ca:byte(1)~=dc then aba[#aba+1]=_ba;_ba=_ba[#_ba].children end;bba(aca)elseif'/'==cba then _ba=aba[#aba]aba[#aba]=nil;bba(aca)elseif'!'==cba then if _d== dba:byte(1)then aca:gsub('([_%w]+)%s+(.)(.-)%2',function(bca,cca,dca)caa[#caa+1]={name=bca,value=dca}end,1)end end end)return{children=_ba,entities=caa,tentities=daa}end local function __a(aaa,baa)local caa,daa=ac.open(aaa)if caa then local _ba=caa:read'*a'caa:close()return dd(_ba,baa),nil end;return caa,daa end local a_a={parse=dd,parseFile=__a,defaultEntityTable=ad,replaceEntities=bd,createEntityTable=cd}local b_a=require("expect").expect;local c_a={}local d_a={}function c_a.extensionProperties(aaa) aaa:initialize("VisualElement")end;function c_a.init(aaa) aaa:extend("Init",function(baa)end)end local function _aa(aaa)local baa={} for caa,daa in cc(aaa)do if(daa.tag)then if(daa.tag=="addItem")then if (daa.children[1].children)then table.insert(baa,_aa(daa.children[1].children))else table.insert(baa,daa.children[1].text)end else if(daa.children[1].children)then baa[daa.tag]=_aa(daa.children)else baa[daa.tag]=daa.children[1].text end end end end;return baa end function c_a.generateElementFromXML(aaa,baa,caa)caa=caa or _ENV;caa.basalt=aaa.basalt if(baa.attrs~=nil)then for daa,_ba in cc(baa.attrs)do if(aaa[daa]~=nil)then local aba="set"..daa:gsub("^%l",bc.upper)if(aaa[aba]~=nil)then aaa[aba](aaa,_ba)end end end end for daa,_ba in cc(baa.children)do if(_ba.tag)then if(aaa[_ba.tag]~=nil)then local aba="set".. _ba.tag:gsub("^%l",bc.upper) if(aaa[aba]~=nil)then if( aaa:getPropertyType(_ba.tag)=="table")then local bba=_aa(_ba.children) aaa[aba](aaa,bba)else aaa[aba](aaa,_ba.children[1].text)end elseif(aaa[_ba.tag]~=nil)then aaa[_ba.tag](aaa,function(...)caa.event=...or nil;caa.self=aaa load( "return ".._ba.children[1].text,nil,"t",caa)()end)else error("No property or event found for ".._ba.tag.." in (".. aaa:getType()..") "..aaa:getName())end end end end;return aaa end function c_a.loadXML(aaa,baa,caa)b_a(1,aaa,"table")b_a(2,baa,"string") b_a(3,caa,"table","nil")local daa=a_a.parse(baa) aaa:generateElementFromXML(daa,caa)return aaa end function c_a.loadXMLFile(aaa,baa,caa)b_a(1,aaa,"table")b_a(2,baa,"string") b_a(3,caa,"table","nil")local daa,_ba=a_a.parseFile(baa)if daa then aaa:generateElementFromXML(daa,caa)return aaa end;error(_ba)end function d_a.generateElementFromXML(aaa,baa,caa)caa=caa or _ENV;caa.basalt=aaa.basalt local daa=require("basaltLoader").load("BasicElement").generateElementFromXML for _ba,aba in cc(baa.children)do if(aba.tag)then local bba="add"..aba.tag:gsub("^%l",bc.upper)if(aaa[bba])then aaa[bba](aaa,aba.attrs.name or nil):generateElementFromXML(aba,caa)end end end;daa(aaa,baa)return aaa end;return{BasicElement=c_a,Container=d_a}