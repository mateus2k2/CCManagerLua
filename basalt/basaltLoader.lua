local db=table.pack(...) local _c=fs.getDir(db[2]or".basalt")if(_c==nil)then error("Unable to find directory "..db[2].." please report this bug to our discord.")end;local ac={}local bc={}local cc={} local dc={}local _d={}local ad;local bd if not(bundled)then if(fs.exists(fs.combine(_c,"elements")))then for c_a,d_a in pairs(fs.list(fs.combine(_c,"elements")))do if (fs.isDir(fs.combine(fs.combine(_c,"elements"),d_a)))then cc[d_a]=true else local _aa=d_a:gsub(".lua","")cc[_aa]=true end end end;local b_a={} if(fs.exists(fs.combine(_c,"extensions")))then for c_a,d_a in pairs(fs.list(fs.combine(_c,"extensions")))do table.insert(b_a,d_a)end end for c_a,d_a in pairs(b_a)do local _aa if (fs.isDir(fs.combine(fs.combine(_c,"extensions"),d_a)))then table.insert(_d,fs.combine(fs.combine(_c,"extensions"),d_a))_aa=require(d_a.."/init")else table.insert(_d,d_a) _aa=require(d_a:gsub(".lua",""))end if(type(_aa)=="table")then for aaa,baa in pairs(_aa)do if(type(aaa)=="string")then if(dc[aaa]==nil)then dc[aaa]={}end;table.insert(dc[aaa],baa)end end end end else for b_a,c_a in pairs(bundled_availableFiles["basalt/elements"])do cc[c_a:gsub(".lua","")]=true end for b_a,c_a in pairs(bundled_availableFiles["basalt/extensions"])do table.insert(_d,c_a) local d_a=require(c_a:gsub(".lua","")) if(type(d_a)=="table")then for _aa,aaa in pairs(d_a)do if(type(_aa)=="string")then if(dc[_aa]==nil)then dc[_aa]={}end;table.insert(dc[_aa],aaa)end end end end end function ac.load(b_a)if bc[b_a]then return bc[b_a]end;local c_a=package.path local d_a="path;/path/?.lua;/path/?/init.lua;"local _aa=d_a:gsub("path",_c) local aaa=d_a:gsub("path",_c.."/elements")local baa=d_a:gsub("path",_c.."/extensions")local caa=d_a:gsub("path",_c.. "/libraries")package.path=_aa.. aaa..baa..caa..c_a bc[b_a]=require(fs.combine("elements",b_a)) if dc[b_a]then for daa,_ba in ipairs(dc[b_a])do if(_ba.extensionProperties~=nil)then _ba.extensionProperties(bc[b_a])end;_ba.extensionProperties=nil;if (_ba.init~=nil)then _ba.init(bc[b_a],ad)end;_ba.init=nil for aba,bba in pairs(_ba)do if(type(aba)=="string")then bc[b_a][aba]=bba end end end end;package.path=c_a;return bc[b_a]end;function ac.getElementList()return cc end function ac.extensionExists(b_a)for c_a,d_a in pairs(_d)do if( string.lower(d_a:gsub(".lua",""))==string.lower(b_a))then return true end end;return false end;function ac.getExtension(b_a)if(dc[b_a]~=nil)then return dc[b_a]end;return b_a==nil and dc or nil end;function ac.setBasalt(b_a) ad=b_a end function ac.getConfig() if(bd==nil)then local b_a="https://raw.githubusercontent.com/Pyroxenium/basalt-docs/main/config.json" if(b_a~=nil)then local c_a=http.get(b_a)if(c_a==nil)then error("Couldn't get the config file from github!")end;if(bd~=nil)then pcall(function()c_a.close()end)return bd end bd=textutils.unserializeJSON(c_a.readAll())c_a.close()return bd else error("Couldn't find the github path in the settings basalt.github!")end end;return bd end local function cd(b_a)local c_a=ac.getConfig() for d_a,_aa in pairs(c_a.versions.elements)do if( string.lower(d_a)==string.lower(b_a))then local aaa=_aa[2] local baa=http.get(aaa)if(baa==nil)then error("Couldn't get the element "..b_a.." from github!")end;local caa=baa.readAll()return caa end end end local function dd(b_a)b_a=b_a:gsub("^%l",string.upper) if(cc[b_a]==nil)then print("Loading element ".. b_a.." from github...")local c_a=cd(b_a)if(c_a==nil)then error("Couldn't find the element "..b_a.." in the github config!")end if (settings.get("basalt.storeDownloadedFiles"))then local _aa=fs.open(fs.combine(_c,"elements/"..b_a..".lua"),"w")_aa.write(c_a)_aa.close()end;local d_a=load(c_a,nil,"t",_ENV)()bc[b_a]=d_a if (dc[b_a]~=nil)then for _aa,aaa in ipairs(dc[b_a])do if(aaa.extensionProperties~=nil)then aaa.extensionProperties(bc[b_a])end;aaa.extensionProperties=nil;if (aaa.init~=nil)then aaa.init(bc[b_a],ad)end;aaa.init=nil for baa,caa in pairs(aaa)do if(type(baa)=="string")then bc[b_a][baa]=caa end end end end;cc[b_a]=true;return d_a end end local function __a(b_a)local c_a=ac.getConfig() for d_a,_aa in pairs(c_a.versions.extensions)do if( string.lower(d_a)==string.lower(b_a))then local aaa=_aa[2] local baa=http.get(aaa)if(baa==nil)then error("Couldn't get the extension "..b_a.." from github!")end;local caa=baa.readAll()return caa end end end local function a_a(b_a) if not(ac.extensionExists(b_a))then print("Loading extension "..b_a.." from github...")local c_a=__a(b_a)if(c_a==nil)then error("Couldn't find the extension "..b_a.." in the github config!")end if (settings.get("basalt.storeDownloadedFiles"))then local aaa=fs.open(fs.combine(_c,"extensions/"..b_a..".lua"),"w")aaa.write(c_a)aaa.close()end;local d_a=load(c_a,nil,"t",_ENV)local _aa=d_a() if(type(_aa)=="table")then for aaa,baa in pairs(_aa)do if(dc[aaa]==nil)then dc[aaa]={}end table.insert(dc[aaa],baa) if(aaa=="Basalt")then baa.basalt=ad;for caa,daa in pairs(baa)do if(type(caa)=="string")then if(caa=="init")then daa(ad)else ad[caa]=daa end end end else if(bc[aaa]~=nil)then if( baa.extensionProperties~=nil)then baa.extensionProperties(bc[aaa])end;baa.extensionProperties=nil if(baa.init~=nil)then baa.init(bc[aaa],ad)end;baa.init=nil;for caa,daa in pairs(baa)do if(type(caa)=="string")then bc[aaa][caa]=daa end end end end end end;table.insert(_d,b_a)end end;function ac.require(b_a,c_a) if(b_a=="element")then return dd(c_a)elseif(b_a=="extension")then return a_a(c_a)end end;return ac