local da=require("basaltLoader") local _b=da.load("VisualElement")local ab=require("utils").tHex local bb=require("expect").expect local cb=dofile("rom/modules/main/cc/require.lua").make;local db=string.sub local function _c(bc)local cc,dc=1,1;local _d=true;local ad=true;local bd,cd=1,1 local dd,__a=colors.white,colors.black;local a_a={}local b_a={{},{},{}}local c_a=""local d_a={} local function _aa()c_a=(" "):rep(cc)for n=0,15 do local _ca=2 ^n d_a[_ca]=ab[_ca]:rep(cc)end end local function aaa(_ca,aca)cc,dc=_ca,aca;_aa()local bca=c_a;local cca=d_a[dd]local dca=d_a[__a] for n=1,dc do b_a[1][n]=db( b_a[1][n]==nil and bca or b_a[1][n].. bca:sub(1,cc-b_a[1][n]:len()),1,cc) b_a[2][n]=db(b_a[2][n]==nil and cca or b_a[2][n]..cca:sub(1,cc- b_a[2][n]:len()),1,cc) b_a[3][n]=db(b_a[3][n]==nil and dca or b_a[3][n]..dca:sub(1,cc- b_a[3][n]:len()),1,cc)end end;local function baa() if bd>=1 and cd>=1 and bd<=cc and cd<=dc then else end end local function caa(_ca,aca,bca)if cd<1 or cd>dc or bd<1 or bd+#_ca-1 >cc then return end b_a[1][cd]=db(b_a[1][cd],1, bd-1).._ca..db(b_a[1][cd],bd+#_ca,cc)b_a[2][cd]=db(b_a[2][cd],1,bd-1).. aca..db(b_a[2][cd],bd+#_ca,cc) b_a[3][cd]=db(b_a[3][cd],1, bd-1)..bca..db(b_a[3][cd],bd+#_ca,cc)bd=bd+#_ca;if _d then baa()end;bc:updateRender()end local daa=function(_ca) if type(_ca)~="number"then error("bad argument #1 (expected number, got "..type(_ca)..")",2)elseif ab[_ca]==nil then error("Invalid color (got ".._ca..")",2)end;dd=_ca end local _ba=function(_ca) if type(_ca)~="number"then error("bad argument #1 (expected number, got "..type(_ca)..")",2)elseif ab[_ca]==nil then error("Invalid color (got ".._ca..")",2)end;__a=_ca end local aba=function(_ca,aca,bca,cca)if type(_ca)~="number"then error("bad argument #1 (expected number, got "..type(_ca)..")",2)end if ab[_ca]==nil then error("Invalid color (got ".. _ca..")",2)end;local dca if type(aca)=="number"and bca==nil and cca==nil then dca={colours.rgb8(aca)}a_a[_ca]=dca else if type(aca)~="number"then error("bad argument #2 (expected number, got "..type(aca)..")",2)end;if type(bca)~="number"then error( "bad argument #3 (expected number, got "..type(bca)..")",2)end;if type(cca)~="number"then error( "bad argument #4 (expected number, got "..type(cca)..")",2)end;dca=a_a[_ca]dca[1]=aca dca[2]=bca;dca[3]=cca end end local bba=function(_ca)if type(_ca)~="number"then error("bad argument #1 (expected number, got "..type(_ca)..")",2)end if ab[_ca]==nil then error("Invalid color (got ".. _ca..")",2)end;local aca=a_a[_ca]return aca[1],aca[2],aca[3]end local cba={setCursorPos=function(_ca,aca)if type(_ca)~="number"then error("bad argument #1 (expected number, got "..type(_ca)..")",2)end;if type(aca)~="number"then error( "bad argument #2 (expected number, got "..type(aca)..")",2)end;bd=math.floor(_ca) cd=math.floor(aca)if(_d)then baa()end end,getCursorPos=function()return bd,cd end,setCursorBlink=function(_ca)if type(_ca)~="boolean"then error("bad argument #1 (expected boolean, got ".. type(_ca)..")",2)end;ad=_ca end,getCursorBlink=function()return ad end,getPaletteColor=bba,getPaletteColour=bba,setBackgroundColor=_ba,setBackgroundColour=_ba,setTextColor=daa,setTextColour=daa,setPaletteColor=aba,setPaletteColour=aba,getBackgroundColor=function()return __a end,getBackgroundColour=function()return __a end,getSize=function()return cc,dc end,getTextColor=function()return dd end,getTextColour=function()return dd end,getRenderData=function()return b_a end,scroll=function(_ca) assert(type(_ca)=="number", "bad argument #1 (expected number, got "..type(_ca)..")") if _ca~=0 then for newY=1,dc do local aca=newY+_ca if aca<1 or aca>dc then b_a[1][newY]=c_a b_a[2][newY]=d_a[dd]b_a[3][newY]=d_a[__a]else b_a[1][newY]=b_a[1][aca] b_a[2][newY]=b_a[2][aca]b_a[3][newY]=b_a[3][aca]end end end;if(_d)then baa()end end,isColor=function()return bc.basalt.getTerm().isColor()end,isColour=function()return bc.basalt.getTerm().isColor()end,write=function(_ca)_ca=tostring(_ca)if(_d)then caa(_ca,ab[dd]:rep(_ca:len()),ab[__a]:rep(_ca:len()))end end,clearLine=function()if (_d)then bd=1 caa((" "):rep(cc),ab[dd]:rep(cc),ab[__a]:rep(cc))end end,clear=function() for n=1,dc do b_a[1][n]=c_a;b_a[2][n]=d_a[dd]b_a[3][n]=d_a[__a]end;if(_d)then baa()end end,blit=function(_ca,aca,bca)if type(_ca)~="string"then error("bad argument #1 (expected string, got "..type(_ca)..")",2)end;if type(aca)~="string"then error( "bad argument #2 (expected string, got "..type(aca)..")",2)end;if type(bca)~="string"then error( "bad argument #3 (expected string, got "..type(bca)..")",2)end if #aca~=#_ca or#bca~=#_ca then error("Arguments must be the same length",2)end;if(_d)then caa(_ca,aca,bca)end end}local dba={} return {setSize=function(_ca,aca)aaa(_ca,aca)end,setVisible=function(_ca)_d=_ca end,setCursorBlink=function(_ca)ad=_ca end,getCursorBlink=function() return ad end,start=function(_ca,aca,...)local bca={...}aca=aca or{}dba={}dba.window=cba cba.current=term.current;cba.redirect=term.redirect if(type(_ca)=="string")then dba.coroutine=coroutine.create(function() local _da=shell.resolveProgram(_ca)local ada=setmetatable(aca,{__index=_ENV})ada.shell=shell;if (_da==nil)then error("The path ".._ca.." does not exist!")end ada.require,ada.package=cb(ada,fs.getDir(_da)) if(fs.exists(_da))then local bda=fs.open(_da,"r")local cda=bda.readAll() bda.close()local dda=load(cda,_ca,"bt",ada)if(dda~=nil)then term.redirect(dba.window)local __b=dda(_ca,table.unpack(bca)) term.redirect(bc.basalt.getTerm())return __b end end end)elseif(type(_ca)=="function")then dba.coroutine=coroutine.create(function() _ca(table.unpack(bca))end)else return end;local cca,dca=coroutine.resume(dba.coroutine)if not cca then error(dca)end end,resume=function(_ca,...) term.redirect(dba.window)if(dba.coroutine==nil)then return end;if(dba.filter~=nil)then if(_ca~=dba.filter)then return end;dba.filter=nil end local aca,bca=coroutine.resume(dba.coroutine,_ca,...)if aca then dba.filter=bca else end term.redirect(bc.basalt.getTerm())return aca,bca end,stop=function() dba={}end,getProcess=function()return dba end,getRenderData=function()return cba.getRenderData()end,getStatus=function()return coroutine.status(dba.coroutine)end,isDead=function()return coroutine.status(dba.coroutine)=="dead"end}end;local ac=setmetatable({},_b)ac.__index=ac ac:initialize("Program")ac:addProperty("program","table") function ac:new(bc,cc,dc) local _d=_b:new(bc,cc,dc)setmetatable(_d,self)self.__index=self _d:setType("Program")_d:create("Program")_d:setSize(20,8) _d:setProgram(_c(_d))_d.program.setSize(20,8)_d:setZ(5)return _d end function ac:render()_b.render(self) local bc=self.program.getRenderData()for cc,dc in ipairs(bc[1])do self:addBlit(1,cc,bc[1][cc],bc[2][cc],bc[3][cc])end end;function ac:start(bc,cc,...)bb(1,self,"table")bb(2,bc,"string","function") self.program.start(bc,cc,...)end function ac:stop() bb(1,self,"table")self.program.stop()return self end ac:extend("Load",function(bc)bc:listenEvent("mouse_click") bc:listenEvent("mouse_up")bc:listenEvent("mouse_scroll") bc:listenEvent("mouse_drag")end)function ac:event(...)self.program.resume(...)end;function ac:mouse_click(...) if (_b.mouse_click(self,...))then self.program.resume("mouse_click",...)return true end end;function ac:mouse_up(...) if (_b.mouse_up(self,...))then self.program.resume("mouse_up",...)return true end end;function ac:mouse_scroll(...) self.program.resume("mouse_scroll",...)end function ac:mouse_drag(...)if(_b.mouse_drag(self,...))then self.program.resume("mouse_drag",...)return true end end function ac:key(...)if(_b.key(self,...))then self.program.resume("key",...) return true end end function ac:key_up(...)if(_b.key_up(self,...))then self.program.resume("key_up",...)return true end end function ac:char(...)if(_b.char(self,...))then self.program.resume("char",...)return true end end;return ac