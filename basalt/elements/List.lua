local ba=require("basaltLoader") local ca=ba.load("VisualElement")local da=require("utils").tHex local _b=require("expect").expect;local ab=require("log")local bb=setmetatable({},ca)bb.__index=bb bb:initialize("List")bb:addProperty("items","table",{}) bb:addProperty("itemsBackground","table",{})bb:addProperty("itemsForeground","table",{}) bb:addProperty("connectedLists","table",{})bb:addProperty("selection","boolean",true) bb:addProperty("align","string","left")bb:addProperty("multiSelection","boolean",false) bb:addProperty("autoScroll","boolean",false)bb:addProperty("spacing","number",0) bb:addProperty("selectedIndex","table",{},nil,function(cb,db,_c) local ac=cb.selectedIndex if(cb:getMultiSelection())then if(type(db)=="table")then ac=db else if(cb:getSelectionState(db))then for bc,cc in ipairs(ac)do if cc==db then table.remove(ac,bc)break end end else table.insert(ac,db)end end if(_c~=false)then for bc,cc in pairs(cb:getConnectedLists())do cc:setSelectedIndex(ac,false)end end;return ac else if(_c~=false)then for bc,cc in pairs(cb:getConnectedLists())do cc:setSelectedIndex(db,false)end end;return{db}end end,function(cb,db)if (cb:getMultiSelection())then return db else return db[1]end end) bb:addProperty("selectionBackground","color",colors.black) bb:addProperty("selectionForeground","color",colors.cyan) bb:combineProperty("selectionColor","selectionBackground","selectionForeground") bb:addProperty("scrollIndex","number",1,nil,function(cb,db,_c) if(_c~=false)then for ac,bc in pairs(cb:getConnectedLists())do bc:setScrollIndex(db,false)end end end)bb:addListener("change","changed_value") function bb:new(cb,db,_c) local ac=ca:new(cb,db,_c)setmetatable(ac,self)self.__index=self ac:setType("List")ac:create("List")ac:setSize(15,6)return ac end bb:extend("Load",function(cb)cb:listenEvent("mouse_click") cb:listenEvent("mouse_scroll")end) function bb:render()ca.render(self)local cb,db=self:getSize() local _c=self:getItems()local ac=self:getItemsBackground() local bc=self:getItemsForeground()local cc=self:getScrollIndex() local dc,_d=self:getSelectionColor()local ad=self:getSelection()local bd=self:getSpacing() local cd=self:getAlign() for i=1,db do local dd=i+cc-1;local __a=_c[dd] if __a then if(cd=="right")then self:addText(cb-#__a+1 -bd,i,__a)elseif(cd=="center")then self:addText(math.floor((cb-#__a)/2)+1,i,__a)else self:addText(1 +bd,i,__a)end;if(ac[dd])then self:addBg(1,i,da[ac[dd]]:rep(cb))end;if(bc[dd])then self:addFg(1,i,da[bc[dd]]:rep(cb))end;if(ad)then if self:getSelectionState(dd)then self:addBg(1,i,da[dc]:rep(cb))self:addFg(1,i,da[_d]:rep(cb))end end end end end function bb:connect(cb,db,_c)_b(1,self,"table")_b(2,cb,"table") _b(3,db,"boolean","nil")_b(4,_c,"boolean","nil") table.insert(self.connectedLists,cb) if(_c~=false)then for ac,bc in ipairs(self.connectedLists)do if(bc~=cb)then bc:connect(cb,true,false)cb:connect(bc,true,false)end end;cb:connect(self,true,false)end if not(db)then cb:setSelection(self:getSelection()) cb:setMultiSelection(self:getMultiSelection())cb:setAutoScroll(self:getAutoScroll()) cb:setSelectedIndex(self:getSelectedIndex(),false) cb:setScrollIndex(self:getScrollIndex(),false)end;return self end function bb:disconnect(cb,db)_b(1,self,"table")_b(2,cb,"table") _b(3,db,"boolean","nil") for _c,ac in ipairs(self.connectedLists)do if ac==cb then table.remove(self.connectedLists,_c)if(db~=false)then cb:disconnect(self,false)end return self end end;return self end function bb:getSelectionState(cb)_b(1,self,"table")_b(2,cb,"number") if (self:getMultiSelection())then local db=self:getSelectedIndex()for _c,ac in ipairs(db)do if ac==cb then return true end end else if(self:getSelectedIndex()==cb)then return true end end;return false end function bb:addItem(cb,db,_c)_b(1,self,"table")_b(2,cb,"string") _b(3,db,"number","nil")_b(4,_c,"number","nil") table.insert(self.items,cb)if(db~=nil)then table.insert(self.itemsBackground,db or self:getBackground())end if(_c~=nil)then table.insert(self.itemsForeground,_c or self:getForeground())end if(self:getAutoScroll())then if (#self:getItems()>self:getHeight())then self:setScrollIndex(#self:getItems()-self:getHeight()+1)end end;self:updateRender()return self end function bb:updateColor(cb,db,_c)_b(1,self,"table")_b(2,cb,"number") _b(3,db,"number","nil")_b(4,_c,"number","nil")self.itemsBackground[cb]=_c or self:getBackground()self.itemsForeground[cb]=db or self:getForeground()self:updateRender() return self end function bb:removeItem(cb)_b(1,self,"table")_b(2,cb,"string") for db,_c in ipairs(self.items)do if _c==cb then table.remove(self.items,db) table.remove(self.itemsBackground,db)table.remove(self.itemsForeground,db) if (self:getAutoScroll())then if(#self:getItems()>self:getHeight())then self:setScrollIndex(# self:getItems()-self:getHeight()+1)end end;self:updateRender()return self end end;return self end function bb:removeItemByIndex(cb)_b(1,self,"table")_b(2,cb,"number") table.remove(self.items,cb)self:updateRender()return self end;function bb:clear()_b(1,self,"table")self.items={}self:updateRender()return self end function bb:selectItem(cb) _b(1,self,"table")_b(2,cb,"string")for db,_c in ipairs(self:getItems())do if _c==cb then self:setSelectedIndex(db)self:fireEvent("change",_c)return self end end self:updateRender()return self end function bb:selectItemByIndex(cb)_b(1,self,"table")_b(2,cb,"number") self:setSelectedIndex(cb) self:fireEvent("change",self:getItems()[cb])return self end function bb:getSelectedItems()_b(1,self,"table") if(self:getMultiSelection())then local cb=self:getItems()local db={}for _c,ac in ipairs(self:getSelectedIndex())do table.insert(db,cb[ac])end;return db else return self:getItems()[self:getSelectedIndex()]end end function bb:mouse_click(cb,db,_c) if(ca.mouse_click(self,cb,db,_c))then if(cb==1)then local ac,bc=self:getPosition()local cc=self:getScrollIndex()local dc=self:getItems() local _d=_c-bc+cc;if _d>=1 and _d<=#dc then self:setSelectedIndex(_d) self:fireEvent("change",self:getSelectedItems())end end;return true end end function bb:mouse_scroll(cb,db,_c) if(ca.mouse_scroll(self,cb,db,_c))then local ac,bc=self:getSize() local cc=self:getScrollIndex()local dc=self:getItems()if cb==1 and cc<#dc-bc+1 then cc=cc+1 elseif cb==-1 and cc>1 then cc=cc-1 end self:setScrollIndex(cc)self:updateRender()return true end end;return bb