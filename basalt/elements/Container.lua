local ab=require("basaltLoader") local bb=ab.load("VisualElement")local cb=require("utils").uuid local db=require("utils").subText;local _c=require("expect").expect local ac=setmetatable({},bb)ac.__index=ac;local bc=require("renderSystem") ac:initialize("Container") ac:addProperty("term","table",nil,false,function(ad,bd)if(bd~=nil)then bd.__noCopy=true end ad.renderSystem=bc(bd)end,function(ad)if(ad:getParent()~=nil)then return ad:getParent():getTerm()end;return ad.term end)ac:addProperty("children","table",{}) ac:addProperty("childrenEvents","table",{})ac:addProperty("visibleChildrenEvents","table",{}) ac:addProperty("isVisibleChildrenEventsUpdated","table",{})ac:addProperty("cursorBlink","boolean",false) ac:addProperty("cursorColor","color",colors.white)ac:addProperty("cursorX","number",1) ac:addProperty("cursorY","number",1) ac:addProperty("focusedChild","table",nil,false,function(ad,bd)local cd=ad:getFocusedChild()if(cd~=bd)then if(cd~=nil)then cd:setFocused(false,true)end if(bd~=nil)then bd:setFocused(true,true)end end;return bd end) ac:addProperty("xOffset","number",0,nil,function(ad,bd)ad:forceVisibleChildrenUpdate()end) ac:addProperty("yOffset","number",0,nil,function(ad,bd)ad:forceVisibleChildrenUpdate()end)ac:combineProperty("Offset","xOffset","yOffset") local cc,dc=string.sub,math.max local function _d(ad,bd) if(bd:sub(1,3)=="add")and(ac[bd]==nil)then local cd=bd:sub(4) if (ab.getElementList()[cd])then return function(dd,__a,a_a,b_a,c_a,d_a,_aa,aaa)local baa=__a if(type(__a)=="table")then baa=__a.name;__a.name=nil end local caa=dd.basalt.create(baa or cb(),dd,cd,type(__a)=="table"and __a or nil)dd:addChild(caa,caa:getZ()) if(a_a~=nil)then caa:setX(a_a)end;if(b_a~=nil)then caa:setY(b_a)end;if(c_a~=nil)then caa:setWidth(c_a)end;if(d_a~=nil)then caa:setHeight(d_a)end;if(_aa~= nil)then caa:setBackground(_aa)end;if(aaa~=nil)then caa:setForeground(aaa)end;return caa end end end;return ac[bd]end function ac:new(ad,bd,cd)local dd=bb:new(ad,bd,cd)setmetatable(dd,self) self.__index=_d;dd:create("Container")dd:setType("Container")return dd end function ac:postRender()if(self:getTerm()==nil)then end local ad=self:getVisibleChildren() if self.parent==nil then if self.updateRendering then bb.postRender(self)for bd,cd in pairs(ad)do cd:processRender()end end else bb.postRender(self)for bd,cd in pairs(ad)do cd:processRender()end end end function ac:processRender()bb.processRender(self) if(self.updateRendering)then if (self.renderSystem~=nil)then self.renderSystem.update() self.updateRendering=false end end end function ac:getVisibleChildren()_c(1,self,"table")if(self.isVisibleChildrenUpdated)then return self.visibleChildren end;local ad={} for bd,cd in ipairs(self.children)do if self:isChildVisible(cd)then table.insert(ad,cd)end end;self.visibleChildren=ad;self.isVisibleChildrenUpdated=true;return ad end function ac:isChildVisible(ad)_c(1,self,"table")_c(2,ad,"table") local bd,cd=ad:getPosition()local dd,__a=ad:getSize()local a_a,b_a=self:getSize() local c_a,d_a=self:getOffset()bd=bd-c_a;cd=cd-d_a;return  ad:getVisible()and bd<=a_a and cd<=b_a and bd+dd>0 and cd+__a>0 end function ac:forceVisibleChildrenUpdate()_c(1,self,"table") self.isVisibleChildrenUpdated=false;for ad,bd in pairs(self.isVisibleChildrenEventsUpdated)do self.isVisibleChildrenEventsUpdated[ad]=false end end function ac:getChild(ad)_c(1,self,"table")_c(2,ad,"string","table") for bd,cd in ipairs(self.children)do if cd:getName()==ad then return cd end end end function ac:addChild(ad,bd)_c(1,self,"table")_c(2,ad,"table") _c(3,bd,"number","nil")if(self:getChild(ad)~=nil)then return end;local cd=false;bd=bd or ad:getZ() for dd,__a in ipairs(self.children)do if bd<__a:getZ()then table.insert(self.children,dd,ad)cd=true;break end end if not cd then table.insert(self.children,ad)end;ad:setParent(self)ad.basalt=self.basalt;ad:init() self.isVisibleChildrenUpdated=false;return ad end function ac:removeChild(ad)_c(1,self,"table")_c(2,ad,"string","table")if(type(ad)== "table")then ad=ad:getName()end;for bd,cd in ipairs(self.children)do if cd:getName()==ad then table.remove(self.children,bd)break end end self.isVisibleChildrenUpdated=false end function ac:isEventRegistered(ad,bd)_c(1,self,"table")_c(2,ad,"string") _c(3,bd,"table") if(self.childrenEvents[ad]==nil)then return false end for cd,dd in ipairs(self.childrenEvents[ad])do if dd==bd then return true end end;return false end function ac:addEvent(ad,bd)_c(1,self,"table")_c(2,ad,"string") _c(3,bd,"table") self.childrenEvents[ad]=self.childrenEvents[ad]or{}if(self:isEventRegistered(ad,bd))then return end;local cd=false for dd,__a in ipairs(self.childrenEvents[ad])do if bd:getZ()>=__a:getZ()then table.insert(self.childrenEvents[ad],dd,bd)cd=true;break end end;if not cd then table.insert(self.childrenEvents[ad],bd)end;if(self.parent~=nil)then self.parent:addEvent(ad,self)end self.isVisibleChildrenEventsUpdated[ad]=false end function ac:removeEvent(ad,bd)_c(1,self,"table")_c(2,ad,"string") _c(3,bd,"table") if(self.childrenEvents[ad]==nil)then return false end for cd,dd in ipairs(self.childrenEvents[ad])do if dd==bd then table.remove(self.childrenEvents[ad],cd)self.isVisibleChildrenEventsUpdated[ad]=false if (self.parent~=nil)then if(#self.childrenEvents[ad]==0)then self.parent:removeEvent(ad,self)end end;return true end end;return false end function ac:getVisibleChildrenEvents(ad)_c(1,self,"table")_c(2,ad,"string") if (self.isVisibleChildrenEventsUpdated[ad])then return self.visibleChildrenEvents[ad]end;local bd={}if self.childrenEvents[ad]then for cd,dd in ipairs(self.childrenEvents[ad])do if self:isChildVisible(dd)then table.insert(bd,dd)end end end self.visibleChildrenEvents[ad]=bd;self.isVisibleChildrenEventsUpdated[ad]=true;return bd end function ac:updateChild(ad)_c(1,self,"table")_c(2,ad,"table")if not ad or type(ad)~="table"then return end;self:removeChild(ad) self:addChild(ad,ad:getZ()) for bd,cd in pairs(self.childrenEvents)do if self:isEventRegistered(bd,ad)then self:removeEvent(bd,ad)self:addEvent(bd,ad)end end end function ac:setCursor(ad,bd,cd,dd)_c(1,self,"table")_c(2,ad,"boolean") _c(3,bd,"number","nil")_c(4,cd,"number","nil")_c(5,dd,"color","nil") if (self.parent~=nil)then local __a,a_a=self:getPosition()local b_a,c_a=self:getOffset() self.parent:setCursor( ad or false,(bd or 0)+__a-1 -b_a,(cd or 0)+a_a-1 -c_a, dd or self:getForeground())else local __a,a_a=self:getAbsolutePosition() local b_a,c_a=self:getOffset()self.cursorBlink=ad or false;if(bd~=nil)then self.cursorX=__a+bd-1 -b_a end if(cd~=nil)then self.cursorY=a_a+cd-1 -c_a end;self.cursorColor=dd or self.cursorColor if(self.cursorBlink)then self.term.setTextColor(self.cursorColor) self.term.setCursorPos(self.cursorX,self.cursorY)self.term.setCursorBlink(true)else self.term.setCursorBlink(false)end end;return self end for ad,bd in pairs({"setBg","setFg","setText"})do ac[bd]=function(cd,dd,__a,a_a) local b_a,c_a=cd:calculatePosition()local d_a,_aa=cd:getSize() if __a>=1 and __a<=_aa then a_a,dd=db(a_a,dd,d_a) if (dd~=nil)then if cd.parent then cd.parent[bd](cd.parent,b_a+dd-1,c_a+__a-1,""..a_a)else if(cd.renderSystem~=nil)then cd.renderSystem[bd](dd,__a,""..a_a)end end end end end end for ad,bd in pairs({"drawBackgroundBox","drawForegroundBox","drawTextBox"})do ac[bd]=function(cd,dd,__a,a_a,b_a,c_a)local d_a,_aa=cd:calculatePosition()local aaa,baa=cd:getSize() b_a=( __a<1 and(b_a+__a>baa and baa or b_a+__a-1)or( b_a+__a>baa and baa-__a+1 or b_a)) a_a=(dd<1 and(a_a+dd>aaa and aaa or a_a+dd-1)or(a_a+ dd>aaa and aaa-dd+1 or a_a))local caa=dc(dd+ (d_a-1),d_a) if cd.parent then cd.parent[bd](cd.parent,caa,dc(__a+ (_aa-1),_aa),a_a,b_a,c_a)else if(cd.renderSystem~=nil)then cd.renderSystem[bd](caa,dc(__a+ (_aa-1),_aa),a_a,b_a,c_a)end end end end function ac:blit(ad,bd,cd,dd,__a)local a_a,b_a=self:calculatePosition() local c_a,d_a=self:getSize() if bd>=1 and bd<=d_a then local _aa=dc(ad+ (a_a-1),a_a) if self.parent then self.parent.blit(_aa, b_a+bd-1,cd,dd,__a)else if (self.renderSystem~=nil)then self.renderSystem.blit(_aa,b_a+bd-1,cd,dd,__a,ad,c_a)end end end end function ac:event(ad,...)if(bb.event~=nil)then bb.event(self,ad,...)end for bd,cd in ipairs(self.children)do if cd.event then cd:event(ad,...)end end end for ad,bd in pairs({mouse_click=true,mouse_up=false,mouse_drag=false,mouse_scroll=true,mouse_move=false})do ac[ad]=function(cd,dd,__a,a_a,...) if(bb[ad]~=nil)then if(bb[ad](cd,dd,__a,a_a,...))then local b_a=cd:getVisibleChildrenEvents(ad) for c_a,d_a in pairs(b_a)do if(d_a and d_a[ad]~=nil)then local _aa,aaa=cd:getRelativePosition(__a,a_a)if(d_a[ad](d_a,dd,_aa,aaa,...))then cd:setFocusedChild(d_a,true) return true end end end;if(bd)then cd:setFocusedChild(nil,true)end;return true end end end end function ac.mouse_release(ad,bd,cd,dd,...) if(bb.mouse_release~=nil)then if(bb.mouse_release(ad,bd,cd,dd,...))then local __a=ad:getVisibleChildren() for a_a,b_a in pairs(__a)do if(b_a and b_a.mouse_release~=nil)then local c_a,d_a=ad:getRelativePosition(cd,dd)b_a.mouse_release(b_a,bd,c_a,d_a,...)end end;return true end end end for ad,bd in pairs({"key","key_up","char"})do ac[bd]=function(cd,...) if(bb[bd]~=nil)then if(bb[bd](cd,...))then local dd=cd:getFocusedChild()if(dd)then if(dd[bd]~=nil)then if(dd[bd](dd,...))then return true end end end;return true end end end end;return ac