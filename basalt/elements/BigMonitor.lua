local ab,bb,cb,db=type,string.len,string.rep,string.sub local _c=require("utils").tHex;local ac=require("expect").expect local function bc(ad)local bd,cd,dd,__a,a_a,b_a=1,1,1,1,0,0 local c_a,d_a=false,1;local _aa,aaa=colors.white,colors.black for bba,cba in pairs(ad)do for dba,_ca in pairs(cba)do if(ab(_ca)=="string")then local aca=peripheral.wrap(_ca)if(aca==nil)then error("Unable to find monitor ".._ca)end;ad[bba][dba]=aca ad[bba][dba].name=_ca end end end local function baa()local bba=0;local cba=0 for dba,_ca in pairs(ad)do local aca=0;local bca=0;for cca,dca in pairs(_ca)do local _da,ada=dca.getSize() aca=aca+_da;bca=ada end bba=math.max(bba,aca)cba=cba+bca end;return bba,cba end local function caa(bba,...)local cba={...}return function()for dba,_ca in pairs(ad)do for aca,bca in pairs(_ca)do bca[bba](table.unpack(cba))end end end end local function daa()caa("setCursorBlink",false)() if not(c_a)then return end;if(ad[__a]==nil)then return end;local bba=ad[__a][dd] if(bba==nil)then return end;bba.setCursorBlink(c_a)end local function _ba(bba)local cba=0;for dba,_ca in pairs(ad[bba])do local aca,bca=_ca.getSize() cba=math.max(cba,bca)end;return cba end local function aba(bba,cba,dba,_ca,aca)local bca=dba;local cca=_ca;local dca=aca;local _da=1;local ada=_ba(_da) while cba>ada and _da<=#ad do cba=cba-ada;_da=_da+1;if _da<=#ad then ada=_ba(_da)end end;if _da>#ad then return end;local bda=ad[_da]local cda=1 while bb(bca)>0 and cda<=#bda do local dda=bda[cda]local __b,a_b=dda.getSize()local b_b=bba local c_b=math.min(__b-b_b+1,bb(bca))dda.setCursorPos(b_b,cba) dda.blit(db(bca,1,c_b),db(cca,1,c_b),db(dca,1,c_b))bca=db(bca,c_b+1)cca=db(cca,c_b+1)dca=db(dca,c_b+1)bba=1;cda= cda+1 end end return {clear=caa("clear"),setCursorBlink=function(bba)c_a=bba;daa()end,getCursorBlink=function()return c_a end,getCursorPos=function()return bd,cd end,setCursorPos=function(bba,cba) bd,cd=bba,cba;daa()end,setTextScale=function(bba)caa("setTextScale",bba)() d_a=bba end,getTextScale=function()return d_a end,blit=function(bba,cba,dba)aba(bd,cd,bba,cba,dba)end,write=function(bba) bba=tostring(bba)local cba=bb(bba) aba(bd,cd,bba,cb(_c[_aa],cba),cb(_c[aaa],cba))end,getSize=baa,setBackgroundColor=function(bba) caa("setBackgroundColor",bba)()aaa=bba end,setTextColor=function(bba) caa("setTextColor",bba)()_aa=bba end,calculateClick=function(bba,cba,dba)local _ca=0 for aca,bca in pairs(ad)do local cca=0;local dca=0 for _da,ada in pairs(bca)do local bda,cda=ada.getSize()if(ada.name==bba)then return cba+cca,dba+_ca end cca=cca+bda;if(cda>dca)then dca=cda end end;_ca=_ca+dca end;return cba,dba end}end;local cc=require("basaltLoader")local dc=cc.load("Container") local _d=setmetatable({},dc)_d.__index=_d;_d:initialize("BigMonitor") function _d:new(ad,bd,cd) local dd=dc:new(ad,bd,cd)setmetatable(dd,self)self.__index=self dd:setType("BigMonitor")dd:create("BigMonitor")return dd end function _d:event(ad,...)dc.event(self,ad,...)if(ad=="monitor_resize")then self:forceVisibleChildrenUpdate() self:setSize(self.massiveMon.getSize())end end function _d:setGroup(ad)ac(1,self,"table")ac(2,ad,"table") if(ab(ad)~="table")then error( "Expected table, got "..ab(ad))end;local bd={} for cd,dd in pairs(ad)do bd[cd]={} for __a,a_a in pairs(dd)do if(ab(a_a=="string"))then local b_a=peripheral.wrap(a_a)if(b_a==nil)then error("Unable to find monitor "..a_a)end;bd[cd][__a]=b_a bd[cd][__a].name=a_a elseif(ab(a_a)=="table")then bd[cd][__a]=a_a bd[cd][__a].name=peripheral.getName(a_a)end end end;self.monitors=bd;self.massiveMon=bc(bd) self:setTerm(self.massiveMon) self:setSize(self.massiveMon.getSize())return self end function _d:getGroup()ac(1,self,"table")return self.monitors end function _d:lose_focus()dc.lose_focus(self)self:setCursor(false)end;function _d:monitor_touch(ad,bd,cd) self:mouse_click(1,self.massiveMon.calculateClick(ad,bd,cd))end;return _d